{"version":3,"sources":["assets/alaram.mp3","components/Header.js","components/Quotes.js","components/Button.js","components/Timer.js","components/TimerSettings.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Quotes","props","isBreakTime","quoteText","style","color","Button","Object","assign","type","PomodoroTimer","elapsedMinutes","elapsedSeconds","isTimerRunning","onStartTimer","onResetTimer","document","title","concat","boxShadow","components_Button","name","value","onClick","PomodoroTimerSettings","sessionLength","breakLength","isSoundOn","isAutoStart","onUpdateSession","onUpdateBreak","onUpdateSound","onAutoStart","htmlFor","id","min","max","onChange","checked","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","audioRef","React","createRef","randomNum","Math","round","random","callbackMethodName","END_POINT","handleStart","bind","assertThisInitialized","handleReset","handleSessionLength","handleBreakLength","handleSoundSetting","handleAutoStart","runTimer","that","window","data","setState","getJsonp","url","callback","script","src","body","appendChild","getElementById","remove","clearInterval","timerId","setInterval","event","parseInt","target","number","Number","isNaN","_this$state","current","play","_this$state2","components_Header","components_Quotes","components_Timer","components_TimerSettings","alaramSound","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5fea74f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alaram.4b9995ee.mp3\";","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Pomodoro Timer</h1>\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Quotes.css';\n\nfunction Quotes(props) {\n  const { isBreakTime, quoteText } = props;\n  const quoteStyle = {\n    color: '#3066be',\n  };\n\n  return (\n    <div className=\"quote\" style={isBreakTime ? quoteStyle : {}}>\n      {isBreakTime ? <h2>It&apos;s ok to take a break</h2> : <p>{quoteText}</p>}\n    </div>\n  );\n}\nQuotes.propTypes = {\n  isBreakTime: PropTypes.bool.isRequired,\n  quoteText: PropTypes.string.isRequired,\n};\nexport default Quotes;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n  return <input type=\"button\" {...props} />;\n}\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport './Timer.css';\nimport './Button.css';\n\nfunction PomodoroTimer(props) {\n  const { elapsedMinutes, elapsedSeconds, isBreakTime, isTimerRunning, onStartTimer, onResetTimer } = props;\n  const clockStyle = {\n    boxShadow: ' 0 0 10px 10px #3066be,0px 0px 3px 3px inset #6d9dc5',\n  };\n  /* update document title with clock time */\n  document.title = `${`${elapsedMinutes < 10 ? `0${elapsedMinutes}` : elapsedMinutes} : `}${\n    elapsedSeconds < 10 ? `0${elapsedSeconds}` : elapsedSeconds\n  }`;\n\n  return (\n    <div className=\"timer\">\n      <div className=\"clock\" style={isBreakTime ? clockStyle : {}}>\n        {elapsedMinutes < 10 ? `0${elapsedMinutes}` : elapsedMinutes}\n        {' : '}\n        {elapsedSeconds < 10 ? `0${elapsedSeconds}` : elapsedSeconds}\n      </div>\n      <br />\n      <Button\n        name=\"start\"\n        value={isTimerRunning ? 'Pause' : 'Start'}\n        className={isTimerRunning ? 'btn btn-stop' : 'btn btn-start'}\n        onClick={onStartTimer}\n      />\n      <Button name=\"reset\" value=\"Reset\" className=\"btn btn-reset\" onClick={onResetTimer} />\n    </div>\n  );\n}\n\nPomodoroTimer.propTypes = {\n  elapsedMinutes: PropTypes.number.isRequired,\n  elapsedSeconds: PropTypes.number.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  onResetTimer: PropTypes.func.isRequired,\n  onStartTimer: PropTypes.func.isRequired,\n};\nexport default PomodoroTimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TimerSettings.css';\n\nfunction PomodoroTimerSettings(props) {\n  const {\n    sessionLength,\n    breakLength,\n    isSoundOn,\n    isAutoStart,\n    onUpdateSession,\n    onUpdateBreak,\n    onUpdateSound,\n    onAutoStart,\n  } = props;\n  return (\n    <div className=\"timer-settings\">\n      <h2>settings</h2>\n      <label htmlFor=\"session\">\n        Session Length\n        <input\n          type=\"number\"\n          id=\"session\"\n          min=\"1\"\n          max=\"60\"\n          value={sessionLength}\n          name=\"sessionTime\"\n          onChange={onUpdateSession}\n        />\n      </label>\n\n      <label htmlFor=\"break\">\n        Break Length\n        <input\n          type=\"number\"\n          id=\"break\"\n          min=\"1\"\n          max=\"20\"\n          value={breakLength}\n          name=\"breakTime\"\n          onChange={onUpdateBreak}\n        />\n      </label>\n      <label htmlFor=\"sounds\">\n        Sounds\n        <input type=\"checkbox\" id=\"sounds\" name=\"timer-sounds\" checked={isSoundOn} onChange={onUpdateSound} />\n        <span />\n      </label>\n      <label htmlFor=\"auto-start\">\n        Auto start session\n        <input type=\"checkbox\" id=\"auto-start\" name=\"timer-sounds\" checked={isAutoStart} onChange={onAutoStart} />\n        <span />\n      </label>\n    </div>\n  );\n}\nPomodoroTimerSettings.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  breakLength: PropTypes.number.isRequired,\n  onUpdateSession: PropTypes.func.isRequired,\n  onUpdateBreak: PropTypes.func.isRequired,\n  onUpdateSound: PropTypes.func.isRequired,\n  onAutoStart: PropTypes.func.isRequired,\n};\nexport default PomodoroTimerSettings;\n","import React from 'react';\nimport Header from './Header';\nimport Quotes from './Quotes';\nimport PomodoroTimer from './Timer';\nimport TimerSettings from './TimerSettings';\nimport alaramSound from '../assets/alaram.mp3';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionLength: 25,\n      breakLength: 5,\n      elapsedMinutes: 0,\n      elapsedSeconds: 0,\n      isBreakTime: false,\n      isTimerRunning: false,\n      isSoundOn: true,\n      isAutoStart: true,\n      quoteText: 'Self-trust is the first secret of success',\n    };\n    const { sessionLength } = this.state;\n    this.state.elapsedMinutes = sessionLength;\n    this.audioRef = React.createRef();\n    this.randomNum = Math.round(10000 * Math.random());\n    this.callbackMethodName = `cb_${this.randomNum}`;\n    this.END_POINT = 'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=';\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleSessionLength = this.handleSessionLength.bind(this);\n    this.handleBreakLength = this.handleBreakLength.bind(this);\n    this.handleSoundSetting = this.handleSoundSetting.bind(this);\n    this.handleAutoStart = this.handleAutoStart.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const that = this;\n    // getJsonp callback method\n    // eslint-disable-next-line func-names\n    window[this.callbackMethodName] = function(data) {\n      that.setState({\n        quoteText: data.quoteText,\n      });\n    };\n    this.getJsonp(this.END_POINT, this.callbackMethodName);\n  }\n\n  getJsonp(url, callback) {\n    const script = document.createElement('script');\n    script.id = `script_${this.callbackMethodName}`;\n    script.src = url + callback;\n    document.body.appendChild(script);\n    document.getElementById(script.id).remove();\n  }\n\n  handleStart() {\n    const { isTimerRunning } = this.state;\n    if (isTimerRunning) {\n      /* if timer running : pause it */\n      clearInterval(this.timerId);\n    } else {\n      /* run timer */\n      this.timerId = setInterval(this.runTimer, 1000);\n    }\n\n    this.setState(state => ({\n      isTimerRunning: !state.isTimerRunning,\n    }));\n  }\n\n  handleReset() {\n    const { sessionLength } = this.state;\n    clearInterval(this.timerId);\n    this.setState({\n      elapsedMinutes: sessionLength,\n      elapsedSeconds: 0,\n      isTimerRunning: false,\n      isBreakTime: false,\n    });\n  }\n\n  handleSessionLength(event) {\n    const { isTimerRunning } = this.state;\n    const value = parseInt(event.target.value, 10);\n    const number = Number.isNaN(value) ? 1 : value;\n\n    this.setState({\n      sessionLength: number,\n    });\n    /* update timer value if it is not running */\n    if (!isTimerRunning) {\n      this.setState({\n        elapsedMinutes: number,\n      });\n    }\n  }\n\n  handleBreakLength(event) {\n    const value = parseInt(event.target.value, 10);\n    const number = Number.isNaN(value) ? 1 : value;\n\n    this.setState({\n      breakLength: number,\n    });\n  }\n\n  handleAutoStart(event) {\n    this.setState({\n      isAutoStart: event.target.checked,\n    });\n  }\n\n  handleSoundSetting(event) {\n    this.setState({\n      isSoundOn: event.target.checked,\n    });\n  }\n\n  runTimer() {\n    const {\n      elapsedMinutes,\n      elapsedSeconds,\n      sessionLength,\n      breakLength,\n      isBreakTime,\n      isSoundOn,\n      isAutoStart,\n    } = this.state;\n\n    if (elapsedSeconds === 0 && elapsedMinutes !== 0) {\n      this.setState(state => ({\n        elapsedSeconds: 59,\n        elapsedMinutes: state.elapsedMinutes - 1,\n      }));\n    } else if (elapsedMinutes === 0 && elapsedSeconds === 0 && isBreakTime === false) {\n      /* start break time */\n      if (isSoundOn) {\n        this.audioRef.current.play();\n      }\n\n      this.setState({\n        elapsedMinutes: breakLength,\n        elapsedSeconds: 0,\n        isBreakTime: true,\n      });\n    } else if (elapsedMinutes === 0 && elapsedSeconds === 0 && isBreakTime === true) {\n      /* re start timer after break */\n      this.getJsonp(this.END_POINT, this.callbackMethodName); // get new quote\n\n      if (isAutoStart) {\n        this.setState({\n          elapsedMinutes: sessionLength,\n        });\n      } else {\n        this.handleReset();\n      }\n\n      this.setState({\n        isBreakTime: false,\n      });\n    } else {\n      /* update elapsed seconds */\n      this.setState(state => ({\n        elapsedSeconds: state.elapsedSeconds - 1,\n      }));\n    }\n  }\n\n  render() {\n    const { isBreakTime, quoteText } = this.state;\n    return (\n      <div className=\"container\">\n        <Header />\n        <Quotes isBreakTime={isBreakTime} quoteText={quoteText} />\n        <PomodoroTimer {...this.state} onStartTimer={this.handleStart} onResetTimer={this.handleReset} />\n        <TimerSettings\n          {...this.state}\n          onUpdateSession={this.handleSessionLength}\n          onUpdateBreak={this.handleBreakLength}\n          onUpdateSound={this.handleSoundSetting}\n          onAutoStart={this.handleAutoStart}\n        />\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio src={alaramSound} ref={this.audioRef} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}