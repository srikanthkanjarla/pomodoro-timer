{"version":3,"sources":["assets/alaram.mp3","components/Header.js","components/Quotes.js","components/Button.js","components/Timer.js","components/TimerSettings.js","components/indexedDB.js","components/Todo/TodoInputForm.js","components/Todo/TodoFilter.js","components/Todo/TodoItems.js","components/Todo/Todo.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Quotes","props","isBreakTime","quoteText","style","color","Button","Object","assign","type","PomodoroTimer","elapsedMinutes","elapsedSeconds","isTimerRunning","onStartTimer","onResetTimer","document","title","concat","boxShadow","components_Button","name","value","onClick","PomodoroTimerSettings","sessionLength","breakLength","isSoundOn","isAutoStart","onUpdateSession","onUpdateBreak","onUpdateSound","onAutoStart","htmlFor","id","min","max","onChange","checked","indexedDBConnection","window","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","TodoInputForm","onFormSubmit","onInputChange","text","onSubmit","event","placeholder","TodoFilter","filter","onFilterTasks","background","TodoItems","tasks","onToggleTodo","map","task","key","completed","textDecoration","textDecorationColor","Todo","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFormSubmit","bind","assertThisInitialized","handleInputChange","handleFilterTasks","handleToggleTask","getVisibleTasks","dbPromise","dBConnection","getAllTasksfromDB","_this2","then","db","transaction","objectStore","getAll","data","setState","length","e","preventDefault","trim","tx","add","complete","catch","error","target","objectSpread","put","_this$state","Todo_TodoInputForm","Todo_TodoFilter","Todo_TodoItems","React","Component","App","audioRef","createRef","randomNum","Math","round","random","callbackMethodName","END_POINT","handleStart","handleReset","handleSessionLength","handleBreakLength","handleSoundSetting","handleAutoStart","runTimer","that","getJsonp","url","callback","script","src","body","appendChild","getElementById","remove","clearInterval","timerId","setInterval","parseInt","number","Number","isNaN","current","play","_this$state2","components_Header","components_Quotes","components_Timer","components_TimerSettings","components_Todo_Todo","alaramSound","ref","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d26f5b1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alaram.4b9995ee.mp3\";","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Pomodoro Timer</h1>\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Quotes.css';\n\nfunction Quotes(props) {\n  const { isBreakTime, quoteText } = props;\n  const quoteStyle = {\n    color: '#3066be',\n  };\n\n  return (\n    <div className=\"quote\" style={isBreakTime ? quoteStyle : {}}>\n      {isBreakTime ? <h2>It&apos;s ok to take a break</h2> : <p>{quoteText}</p>}\n    </div>\n  );\n}\nQuotes.propTypes = {\n  isBreakTime: PropTypes.bool.isRequired,\n  quoteText: PropTypes.string.isRequired,\n};\nexport default Quotes;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n  return <input type=\"button\" {...props} />;\n}\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport './Timer.css';\nimport './Button.css';\n\nfunction PomodoroTimer(props) {\n  const { elapsedMinutes, elapsedSeconds, isBreakTime, isTimerRunning, onStartTimer, onResetTimer } = props;\n  const clockStyle = {\n    boxShadow: ' 0 0 0 10px #3066be,0 0 0 5px inset #6d9dc5',\n  };\n  /* update document title with clock time */\n  document.title = `${`${elapsedMinutes < 10 ? `0${elapsedMinutes}` : elapsedMinutes} : `}${\n    elapsedSeconds < 10 ? `0${elapsedSeconds}` : elapsedSeconds\n  }`;\n\n  return (\n    <div className=\"timer\">\n      <div className=\"clock\" style={isBreakTime ? clockStyle : {}}>\n        {elapsedMinutes < 10 ? `0${elapsedMinutes}` : elapsedMinutes}\n        {' : '}\n        {elapsedSeconds < 10 ? `0${elapsedSeconds}` : elapsedSeconds}\n      </div>\n      <div className=\"btn-controls\">\n        <Button\n          name=\"start\"\n          value={isTimerRunning ? 'Pause' : 'Start'}\n          className={isTimerRunning ? 'btn btn-stop' : 'btn btn-start'}\n          onClick={onStartTimer}\n        />\n        <Button name=\"reset\" value=\"Reset\" className=\"btn btn-reset\" onClick={onResetTimer} />\n      </div>\n    </div>\n  );\n}\n\nPomodoroTimer.propTypes = {\n  elapsedMinutes: PropTypes.number.isRequired,\n  elapsedSeconds: PropTypes.number.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  onResetTimer: PropTypes.func.isRequired,\n  onStartTimer: PropTypes.func.isRequired,\n};\nexport default PomodoroTimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TimerSettings.css';\n\nfunction PomodoroTimerSettings(props) {\n  const {\n    sessionLength,\n    breakLength,\n    isSoundOn,\n    isAutoStart,\n    onUpdateSession,\n    onUpdateBreak,\n    onUpdateSound,\n    onAutoStart,\n  } = props;\n  return (\n    <div className=\"settings\">\n      <h2>settings</h2>\n      <div className=\"timer-settings\">\n        <label htmlFor=\"session\">\n          <input\n            type=\"number\"\n            id=\"session\"\n            min=\"1\"\n            max=\"60\"\n            value={sessionLength}\n            name=\"sessionTime\"\n            onChange={onUpdateSession}\n          />\n          Session Length\n        </label>\n        <br />\n        <label htmlFor=\"break\">\n          <input\n            type=\"number\"\n            id=\"break\"\n            min=\"1\"\n            max=\"20\"\n            value={breakLength}\n            name=\"breakTime\"\n            onChange={onUpdateBreak}\n          />\n          Break Length\n        </label>\n      </div>\n      <div className=\"other-settings\">\n        <label htmlFor=\"sounds\" className=\"sound-setting\">\n          <input type=\"checkbox\" id=\"sounds\" name=\"timer-sounds\" checked={isSoundOn} onChange={onUpdateSound} />\n          <span />\n          Sounds\n        </label>\n        <br />\n        <label htmlFor=\"auto-start\" className=\"auto-start\">\n          <input type=\"checkbox\" id=\"auto-start\" name=\"timer-sounds\" checked={isAutoStart} onChange={onAutoStart} />\n          <span />\n          Auto start session\n        </label>\n      </div>\n    </div>\n  );\n}\nPomodoroTimerSettings.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  breakLength: PropTypes.number.isRequired,\n  onUpdateSession: PropTypes.func.isRequired,\n  onUpdateBreak: PropTypes.func.isRequired,\n  onUpdateSound: PropTypes.func.isRequired,\n  onAutoStart: PropTypes.func.isRequired,\n  isSoundOn: PropTypes.bool.isRequired,\n  isAutoStart: PropTypes.bool.isRequired,\n};\nexport default PomodoroTimerSettings;\n","import idb from 'idb';\n\nfunction indexedDBConnection() {\n  if (!('indexedDB' in window)) {\n    return false;\n  }\n  const dbPromise = idb.open('todoDB', 1, upgradeDb => {\n    if (!upgradeDb.objectStoreNames.contains('todoStore')) {\n      const todoObjectStore = upgradeDb.createObjectStore('todoStore', { keyPath: 'id' });\n      todoObjectStore.createIndex('id', 'id', { unique: true });\n    }\n  });\n  return dbPromise;\n}\n\nexport default indexedDBConnection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoInputForm(props) {\n  const { onFormSubmit, onInputChange, text } = props;\n  return (\n    <form onSubmit={event => onFormSubmit(event)} className=\"todo-form\">\n      <input\n        type=\"text\"\n        value={text}\n        name=\"todo\"\n        placeholder=\"New task ...\"\n        className=\"todo-input\"\n        onChange={event => onInputChange(event)}\n      />\n      <input type=\"submit\" name=\"add-todo\" value=\"Add\" className=\"btn-add-todo\" />\n    </form>\n  );\n}\nTodoInputForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\nexport default TodoInputForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoFilter(props) {\n  const { filter, onFilterTasks } = props;\n  return (\n    <p className=\"todo-filter\">\n      <input\n        type=\"button\"\n        value=\"All\"\n        onClick={() => onFilterTasks('SHOW_ALL')}\n        style={filter === 'SHOW_ALL' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n      <input\n        type=\"button\"\n        value=\"Active\"\n        onClick={() => onFilterTasks('SHOW_ACTIVE')}\n        style={filter === 'SHOW_ACTIVE' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n      <input\n        type=\"button\"\n        value=\"Completed\"\n        onClick={() => onFilterTasks('SHOW_COMPLETED')}\n        style={filter === 'SHOW_COMPLETED' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n    </p>\n  );\n}\nTodoFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onFilterTasks: PropTypes.func.isRequired,\n};\nexport default TodoFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItems(props) {\n  const { tasks, onToggleTodo } = props;\n  return (\n    <ul className=\"todo-items\">\n      {tasks.map(task => (\n        <li\n          key={task.id}\n          style={task.completed ? { textDecoration: 'line-through', textDecorationColor: '#a0099f' } : {}}\n        >\n          <label htmlFor={task.id}>\n            <input type=\"checkbox\" id={task.id} checked={task.completed} onChange={() => onToggleTodo(task.id)} />\n            <span />\n          </label>\n          {task.text}\n        </li>\n      ))}\n    </ul>\n  );\n}\nTodoItems.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  onToggleTodo: PropTypes.func.isRequired,\n};\nexport default TodoItems;\n","import React from 'react';\nimport dBConnection from '../indexedDB';\nimport TodoInputForm from './TodoInputForm';\nimport TodoFilter from './TodoFilter';\nimport TodoItems from './TodoItems';\n\nimport './Todo.css';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      text: '',\n      tasks: [],\n      filter: 'SHOW_ALL',\n    };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleFilterTasks = this.handleFilterTasks.bind(this);\n    this.handleToggleTask = this.handleToggleTask.bind(this);\n    this.getVisibleTasks = this.getVisibleTasks.bind(this);\n  }\n\n  componentDidMount() {\n    this.dbPromise = dBConnection();\n    this.getAllTasksfromDB();\n  }\n\n  // filter todo tasks\n  getVisibleTasks(filter) {\n    const { tasks } = this.state;\n    switch (filter) {\n      case 'SHOW_ALL':\n        return tasks;\n      case 'SHOW_ACTIVE':\n        return tasks.filter(task => !task.completed);\n      case 'SHOW_COMPLETED':\n        return tasks.filter(task => task.completed);\n      default:\n        return tasks;\n    }\n  }\n\n  // get all saved tasks from indexedDB and update tasks array in state\n  getAllTasksfromDB() {\n    // retrieve from indexedDB\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readonly');\n        const store = tx.objectStore('todoStore');\n        return store.getAll();\n      })\n      // update state\n      .then(data => {\n        this.setState({\n          id: data.length ? data[data.length - 1].id : 0,\n          tasks: data,\n        });\n      });\n  }\n\n  // store todo task item in indexedDB and update tasks array in state\n  handleFormSubmit(e) {\n    const { text } = this.state;\n    const { id } = this.state;\n    e.preventDefault();\n    if (!text.trim()) {\n      return;\n    }\n    // save to indexedDB and update state\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readwrite');\n        const store = tx.objectStore('todoStore');\n        store.add({ id: id + 1, text, completed: false });\n        return tx.complete;\n      })\n      .then(\n        this.setState(state => ({\n          id: state.id + 1,\n          tasks: state.tasks.concat({ id: state.id + 1, text, completed: false }),\n          text: '',\n        }))\n      )\n      .catch(error => error);\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  handleFilterTasks(filter) {\n    this.setState({\n      filter,\n    });\n  }\n\n  // update task status:active|completed in state and indexedDB\n\n  handleToggleTask(id) {\n    const { tasks } = this.state;\n    this.setState(state => ({\n      tasks: state.tasks.map(task => (task.id === id ? { ...task, completed: !task.completed } : task)),\n    }));\n\n    this.dbPromise.then(db => {\n      const tx = db.transaction('todoStore', 'readwrite');\n      const store = tx.objectStore('todoStore');\n      store.put({ id, text: tasks[id - 1].text, completed: !tasks[id - 1].completed });\n      return tx.complete;\n    });\n  }\n\n  render() {\n    const { text, filter } = this.state;\n    const tasks = this.getVisibleTasks(filter);\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"todo-title\">To-Do</h1>\n        <TodoInputForm onFormSubmit={this.handleFormSubmit} onInputChange={this.handleInputChange} text={text} />\n        <TodoFilter filter={filter} onFilterTasks={this.handleFilterTasks} />\n        <TodoItems tasks={tasks} onToggleTodo={this.handleToggleTask} />\n      </div>\n    );\n  }\n}\nexport default Todo;\n","import React from 'react';\nimport Header from './Header';\nimport Quotes from './Quotes';\nimport PomodoroTimer from './Timer';\nimport TimerSettings from './TimerSettings';\nimport Todo from './Todo/Todo';\nimport alaramSound from '../assets/alaram.mp3';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionLength: 25,\n      breakLength: 5,\n      elapsedMinutes: 0,\n      elapsedSeconds: 0,\n      isBreakTime: false,\n      isTimerRunning: false,\n      isSoundOn: true,\n      isAutoStart: true,\n      quoteText: 'Self-trust is the first secret of success',\n    };\n    const { sessionLength } = this.state;\n    this.state.elapsedMinutes = sessionLength;\n    this.audioRef = React.createRef();\n    this.randomNum = Math.round(10000 * Math.random());\n    this.callbackMethodName = `cb_${this.randomNum}`;\n    this.END_POINT = 'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=';\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleSessionLength = this.handleSessionLength.bind(this);\n    this.handleBreakLength = this.handleBreakLength.bind(this);\n    this.handleSoundSetting = this.handleSoundSetting.bind(this);\n    this.handleAutoStart = this.handleAutoStart.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const that = this;\n    // eslint-disable-next-line func-names\n    window[this.callbackMethodName] = function(data) {\n      that.setState({\n        quoteText: data.quoteText,\n      });\n    };\n    this.getJsonp(this.END_POINT, this.callbackMethodName);\n  }\n\n  getJsonp(url, callback) {\n    const script = document.createElement('script');\n    script.id = `script_${this.callbackMethodName}`;\n    script.src = url + callback;\n    document.body.appendChild(script);\n    document.getElementById(script.id).remove();\n  }\n\n  handleStart() {\n    const { isTimerRunning } = this.state;\n    if (isTimerRunning) {\n      /* if timer running : pause it */\n      clearInterval(this.timerId);\n    } else {\n      /* run timer */\n      this.timerId = setInterval(this.runTimer, 1000);\n    }\n\n    this.setState(state => ({\n      isTimerRunning: !state.isTimerRunning,\n    }));\n  }\n\n  handleReset() {\n    const { sessionLength } = this.state;\n    clearInterval(this.timerId);\n    this.setState({\n      elapsedMinutes: sessionLength,\n      elapsedSeconds: 0,\n      isTimerRunning: false,\n      isBreakTime: false,\n    });\n  }\n\n  handleSessionLength(event) {\n    const { isTimerRunning } = this.state;\n    const value = parseInt(event.target.value, 10);\n    const number = Number.isNaN(value) ? 1 : value;\n\n    this.setState({\n      sessionLength: number,\n    });\n    /* update timer value if it is not running */\n    if (!isTimerRunning) {\n      this.setState({\n        elapsedMinutes: number,\n      });\n    }\n  }\n\n  handleBreakLength(event) {\n    const value = parseInt(event.target.value, 10);\n    const number = Number.isNaN(value) ? 1 : value;\n\n    this.setState({\n      breakLength: number,\n    });\n  }\n\n  handleAutoStart(event) {\n    this.setState({\n      isAutoStart: event.target.checked,\n    });\n  }\n\n  handleSoundSetting(event) {\n    this.setState({\n      isSoundOn: event.target.checked,\n    });\n  }\n\n  runTimer() {\n    const {\n      elapsedMinutes,\n      elapsedSeconds,\n      sessionLength,\n      breakLength,\n      isBreakTime,\n      isSoundOn,\n      isAutoStart,\n    } = this.state;\n\n    if (elapsedSeconds === 0 && elapsedMinutes !== 0) {\n      this.setState(state => ({\n        elapsedSeconds: 59,\n        elapsedMinutes: state.elapsedMinutes - 1,\n      }));\n    } else if (elapsedMinutes === 0 && elapsedSeconds === 0 && isBreakTime === false) {\n      /* start break time */\n      if (isSoundOn) {\n        this.audioRef.current.play();\n      }\n\n      this.setState({\n        elapsedMinutes: breakLength,\n        elapsedSeconds: 0,\n        isBreakTime: true,\n      });\n    } else if (elapsedMinutes === 0 && elapsedSeconds === 0 && isBreakTime === true) {\n      /* re start timer after break */\n      this.getJsonp(this.END_POINT, this.callbackMethodName); // get new quote\n\n      if (isAutoStart) {\n        this.setState({\n          elapsedMinutes: sessionLength,\n        });\n      } else {\n        this.handleReset();\n      }\n\n      this.setState({\n        isBreakTime: false,\n      });\n    } else {\n      /* update elapsed seconds */\n      this.setState(state => ({\n        elapsedSeconds: state.elapsedSeconds - 1,\n      }));\n    }\n  }\n\n  render() {\n    const { isBreakTime, quoteText } = this.state;\n    return (\n      <div className=\"container\">\n        <Header />\n        <Quotes isBreakTime={isBreakTime} quoteText={quoteText} />\n\n        <div className=\"timer-container\">\n          <PomodoroTimer {...this.state} onStartTimer={this.handleStart} onResetTimer={this.handleReset} />\n          <TimerSettings\n            {...this.state}\n            onUpdateSession={this.handleSessionLength}\n            onUpdateBreak={this.handleBreakLength}\n            onUpdateSound={this.handleSoundSetting}\n            onAutoStart={this.handleAutoStart}\n          />\n        </div>\n        <Todo />\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio src={alaramSound} ref={this.audioRef} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}