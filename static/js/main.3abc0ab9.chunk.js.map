{"version":3,"sources":["assets/alaram.mp3","reducers/timerReducer.js","reducers/quoteReducer.js","reducers/index.js","components/Header.js","components/Quotes.js","containers/GetQuote.js","actions/index.js","components/Timer/FormattedTime.js","components/Timer/Clock.js","components/Timer/Button.js","components/Timer/ClockControls.js","components/Timer/Settings.js","containers/TimerSettings.js","components/Timer/PomodoroApp.js","containers/PomodoroTimer.js","components/indexedDB.js","components/Todo/TodoInputForm.js","components/Todo/TodoFilter.js","components/Todo/TodoItems.js","components/Todo/Todo.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","sessionLength","breakLength","secondsElapsed","isTimerRunning","isTimerPaused","isBreakTime","isAlarmON","isAutoStartON","timerReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","quoteText","quoteAuthor","quoteReducer","text","author","isNewQuote","combineReducers","timer","quote","Header","react_default","a","createElement","className","randomNum","Math","round","random","callbackMethodName","concat","END_POINT","getJsonp","url","callback","script","document","id","src","body","appendChild","getElementById","remove","Quotes","props","updateQuote","window","data","style","color","connect","dispatch","FormattedTime","time","minutes","floor","seconds","Clock","Timer_FormattedTime","Button","assign","ClockControls","onStart","onStop","onReset","Timer_Button","name","value","onClick","PomodoroTimerSettings","updateSessionLength","updateBreakLength","toggleAlarmSound","toggleAutoStart","htmlFor","min","max","onChange","event","parseInt","target","checked","val","Number","isNaN","TimerSettings","PomodoroTimer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","alaramRef","React","createRef","prevProps","currentProps","timerID","setInterval","runTimer","clearInterval","startBreak","current","play","autoStartTimer","resetTimer","timerId","_this$props","_this$props2","startTimer","stopTimer","Timer_Clock","Timer_ClockControls","alaramSound","ref","Component","indexedDBConnection","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","TodoInputForm","onFormSubmit","onInputChange","onSubmit","placeholder","TodoFilter","filter","onFilterTasks","background","TodoItems","tasks","onToggleTodo","map","task","key","completed","textDecoration","textDecorationColor","Todo","handleFormSubmit","bind","assertThisInitialized","handleInputChange","handleFilterTasks","handleToggleTask","getVisibleTasks","dbPromise","dBConnection","getAllTasksfromDB","_this2","then","db","transaction","objectStore","getAll","setState","e","preventDefault","trim","tx","add","complete","catch","error","put","_this$state","Todo_TodoInputForm","Todo_TodoFilter","Todo_TodoItems","App","components_Header","GetQuote","containers_PomodoroTimer","components_Todo_Todo","Boolean","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3abc0ab9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alaram.4b9995ee.mp3\";","const initialState = {\n  sessionLength: 25,\n  breakLength: 5,\n  secondsElapsed: 0,\n  isTimerRunning: false,\n  isTimerPaused: false,\n  isBreakTime: false,\n  isAlarmON: true,\n  isAutoStartON: true,\n};\n\n/* reducer */\nfunction timerReducer(state = initialState, action) {\n  switch (action.type) {\n    /* Clock state */\n    case 'START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n        isTimerPaused: false,\n      };\n    case 'STOP_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: true,\n      };\n    case 'RESET_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: false,\n        isBreakTime: false,\n        secondsElapsed: state.sessionLength * 60,\n      };\n    case 'RUN_TIMER':\n      return {\n        ...state,\n        secondsElapsed: state.secondsElapsed - 1,\n      };\n    case 'START_BREAK':\n      return {\n        ...state,\n        secondsElapsed: state.breakLength * 60,\n        isBreakTime: true,\n      };\n    case 'AUTO_START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n        isBreakTime: false,\n        isTimerPaused: false,\n        secondsElapsed: state.sessionLength * 60,\n      };\n    /* Clock settings */\n    case 'UPDATE_SESSION_LENGTH':\n      return {\n        ...state,\n        sessionLength: action.payload,\n      };\n\n    case 'UPDATE_BREAK_LENGTH':\n      return {\n        ...state,\n        breakLength: action.payload,\n      };\n\n    case 'TOGGLE_ALARAM_SOUND':\n      return { ...state, isAlarmON: !state.isAlarmON };\n\n    case 'TOGGLE_AUTO_START':\n      return {\n        ...state,\n        isAutoStartON: !state.isAutoStartON,\n      };\n\n    default:\n      return { ...state, secondsElapsed: state.sessionLength * 60 };\n  }\n}\n\nexport default timerReducer;\n","const initialState = {\n  quoteText: 'To hell with circumstances; I create opportunities',\n  quoteAuthor: 'Bruce Lee',\n};\n\nfunction quoteReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'UPDATE_QUOTE':\n      return { ...state, quoteText: action.payload.text, quoteAuthor: action.payload.author, isNewQuote: false };\n    default:\n      return { ...state };\n  }\n}\n\nexport default quoteReducer;\n","import { combineReducers } from 'redux';\n\nimport timerReducer from './timerReducer';\nimport quoteReducer from './quoteReducer';\n\nexport default combineReducers({\n  timer: timerReducer,\n  quote: quoteReducer,\n});\n","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Pomodoro Timer</h1>\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Quotes.css';\n\n// JSONP to get quote from API\nconst randomNum = Math.round(10000 * Math.random());\nconst callbackMethodName = `cb_${randomNum}`;\nconst END_POINT = 'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=';\n\n// JSONP function to get data from API\nfunction getJsonp(url, callback) {\n  const script = document.createElement('script');\n  script.id = `script_${callbackMethodName}`;\n  script.src = url + callback;\n  document.body.appendChild(script);\n  document.getElementById(script.id).remove();\n}\n\ngetJsonp(END_POINT, callbackMethodName);\n\nfunction Quotes(props) {\n  const { isBreakTime, quoteText, quoteAuthor, secondsElapsed, updateQuote } = props;\n  // JSONP callback function\n  window[callbackMethodName] = data => {\n    updateQuote({ text: data.quoteText, author: data.quoteAuthor });\n  };\n  // get new quote after break\n  if (secondsElapsed === 0 && isBreakTime) {\n    getJsonp(END_POINT, callbackMethodName);\n  }\n  return (\n    <div className=\"quote\" style={isBreakTime ? { color: '#3066be' } : {}}>\n      {isBreakTime ? (\n        <h2>It&apos;s ok to take a break</h2>\n      ) : (\n        <div>\n          <p>{quoteText}</p>\n          <span className=\"quote-author\">{quoteAuthor}</span>\n        </div>\n      )}\n    </div>\n  );\n}\nQuotes.propTypes = {\n  isBreakTime: PropTypes.bool.isRequired,\n  quoteText: PropTypes.string.isRequired,\n  quoteAuthor: PropTypes.string.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  updateQuote: PropTypes.func.isRequired,\n};\nexport default Quotes;\n","import { connect } from 'react-redux';\nimport Quotes from '../components/Quotes';\nimport { updateQuote } from '../actions';\n\nconst mapStateToProps = state => ({\n  quoteText: state.quote.quoteText,\n  quoteAuthor: state.quote.quoteAuthor,\n  isBreakTime: state.timer.isBreakTime,\n  secondsElapsed: state.timer.secondsElapsed,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateQuote: quote => dispatch(updateQuote(quote)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quotes);\n","/* action constants */\n// TIMER_START TIMER_DECREMENT TIMER_RESET, TIMER_PAUSE, TIMER_END BREAK_TIME SESSION_TIME TIMER_TICK\n\nconst START_TIMER = 'START_TIMER';\nconst RUN_TIMER = 'RUN_TIMER';\nconst STOP_TIMER = 'STOP_TIMER';\nconst RESET_TIMER = 'RESET_TIMER';\nconst START_BREAK = 'START_BREAK';\nconst AUTO_START_TIMER = 'AUTO_START_TIMER';\nconst UPDATE_SESSION_LENGTH = 'UPDATE_SESSION_LENGTH';\nconst UPDATE_BREAK_LENGTH = 'UPDATE_BREAK_LENGTH';\nconst TOGGLE_ALARM_SOUND = 'TOGGLE_ALARM_SOUND';\nconst TOGGLE_AUTO_START = 'TOGGLE_AUTO_START';\nconst UPDATE_QUOTE = 'UPDATE_QUOTE';\n\n/* action creators */\nexport const startTimer = () => ({\n  type: START_TIMER,\n});\n\nexport const runTimer = () => ({\n  type: RUN_TIMER,\n});\n\nexport const stopTimer = () => ({\n  type: STOP_TIMER,\n});\n\nexport const resetTimer = () => ({\n  type: RESET_TIMER,\n});\n\nexport const startBreak = () => ({\n  type: START_BREAK,\n});\n\nexport const autoStartTimer = () => ({\n  type: AUTO_START_TIMER,\n});\n\nexport const updateSessionLength = value => ({\n  type: UPDATE_SESSION_LENGTH,\n  payload: value,\n});\n\nexport const updateBreakLength = value => ({\n  type: UPDATE_BREAK_LENGTH,\n  payload: value,\n});\n\nexport const toggleAlarmSound = () => ({\n  type: TOGGLE_ALARM_SOUND,\n});\n\nexport const toggleAutoStart = () => ({\n  type: TOGGLE_AUTO_START,\n});\n\nexport const updateQuote = quote => ({\n  type: UPDATE_QUOTE,\n  payload: quote,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormattedTime(props) {\n  const { time } = props;\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time % 60);\n  return <p>{`${minutes < 10 ? `0${minutes}` : minutes} : ${seconds < 10 ? `0${seconds}` : seconds}`}</p>;\n}\nFormattedTime.propTypes = {\n  time: PropTypes.number.isRequired,\n};\nexport default FormattedTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormattedTime from './FormattedTime';\n\nfunction Clock(props) {\n  const { sessionLength, secondsElapsed, isTimerRunning, isTimerPaused, isBreakTime } = props;\n  let time;\n\n  if (!isTimerRunning && !isTimerPaused) {\n    time = sessionLength * 60; // * 60 to conver it into seconds\n  } else if ((isTimerRunning && !isTimerPaused) || (!isTimerRunning && isTimerPaused)) {\n    time = secondsElapsed;\n  }\n\n  return (\n    <div className={`clock${' '}${isBreakTime ? 'break' : 'session'}`}>\n      <FormattedTime time={time} />\n    </div>\n  );\n}\nClock.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n};\nexport default Clock;\n","import React from 'react';\nimport './button.css';\n\nfunction Button(props) {\n  return <input type=\"button\" {...props} />;\n}\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nfunction ClockControls(props) {\n  const { isTimerRunning, onStart, onStop, onReset } = props;\n  return (\n    <div className=\"btn-controls\">\n      {isTimerRunning ? (\n        <Button name=\"stop\" value=\"Pause\" className=\"btn btn-stop\" onClick={onStop} />\n      ) : (\n        <Button name=\"start\" value=\"Start\" className=\"btn btn-start\" onClick={onStart} />\n      )}\n      <Button name=\"reset\" value=\"Reset\" className=\"btn btn-reset\" onClick={onReset} />\n    </div>\n  );\n}\n\nClockControls.propTypes = {\n  isTimerRunning: PropTypes.bool.isRequired,\n  onStart: PropTypes.func.isRequired,\n  onStop: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\nexport default ClockControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './settings.css';\n\nfunction PomodoroTimerSettings(props) {\n  const { sessionLength, breakLength, isAlarmON, isAutoStartON } = props;\n  const { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } = props;\n  return (\n    <div className=\"settings\">\n      <h2>settings</h2>\n      <div className=\"timer-settings\">\n        <label htmlFor=\"session\">\n          <input\n            type=\"number\"\n            id=\"session\"\n            min=\"1\"\n            max=\"60\"\n            value={sessionLength}\n            name=\"sessionLength\"\n            onChange={event => updateSessionLength(parseInt(event.target.value, 10))}\n          />\n          Session Length\n        </label>\n        <br />\n        <label htmlFor=\"break\">\n          <input\n            type=\"number\"\n            id=\"break\"\n            min=\"1\"\n            max=\"20\"\n            value={breakLength}\n            name=\"breakLength\"\n            onChange={event => updateBreakLength(parseInt(event.target.value, 10))}\n          />\n          Break Length\n        </label>\n      </div>\n      <div className=\"other-settings\">\n        <label htmlFor=\"sounds\" className=\"sound-setting\">\n          <input type=\"checkbox\" id=\"sounds\" name=\"timer-sounds\" checked={isAlarmON} onChange={toggleAlarmSound} />\n          <span />\n          Alarm Sound\n        </label>\n        <br />\n        <label htmlFor=\"auto-start\" className=\"auto-start\">\n          <input\n            type=\"checkbox\"\n            id=\"auto-start\"\n            name=\"timer-sounds\"\n            checked={isAutoStartON}\n            onChange={toggleAutoStart}\n          />\n          <span />\n          Auto start session\n        </label>\n      </div>\n    </div>\n  );\n}\nPomodoroTimerSettings.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  breakLength: PropTypes.number.isRequired,\n  updateSessionLength: PropTypes.func.isRequired,\n  updateBreakLength: PropTypes.func.isRequired,\n  toggleAlarmSound: PropTypes.func.isRequired,\n  toggleAutoStart: PropTypes.func.isRequired,\n  isAlarmON: PropTypes.bool.isRequired,\n  isAutoStartON: PropTypes.bool.isRequired,\n};\nexport default PomodoroTimerSettings;\n","import { connect } from 'react-redux';\nimport { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } from '../actions';\nimport TimerSettings from '../components/Timer/Settings';\n\nconst mapStateToProps = state => ({\n  sessionLength: state.timer.sessionLength,\n  breakLength: state.timer.breakLength,\n  isAlarmON: state.timer.isAlarmON,\n  isAutoStartON: state.timer.isAutoStartON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateSessionLength: value => {\n    const val = Number.isNaN(value) ? 0 : value;\n    dispatch(updateSessionLength(val));\n  },\n  updateBreakLength: value => {\n    const val = Number.isNaN(value) ? 0 : value;\n    dispatch(updateBreakLength(val));\n  },\n  toggleAlarmSound: () => dispatch(toggleAlarmSound()),\n  toggleAutoStart: () => dispatch(toggleAutoStart()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimerSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Clock from './Clock';\nimport ClockControls from './ClockControls';\nimport TimerSettings from '../../containers/TimerSettings';\nimport './pomodoroApp.css';\nimport alaramSound from '../../assets/alaram.mp3';\n\nclass PomodoroTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.alaramRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentProps = this.props;\n    // start timer\n    if (currentProps.isTimerRunning && !prevProps.isTimerRunning) {\n      this.timerID = setInterval(() => {\n        currentProps.runTimer();\n      }, 1000);\n    }\n    // pause/stop timer\n    if (!currentProps.isTimerRunning && prevProps.isTimerRunning) {\n      clearInterval(this.timerID);\n    }\n    // start break time\n    if (currentProps.secondsElapsed === 0 && !currentProps.isBreakTime) {\n      currentProps.startBreak();\n    }\n    // after break time reset or restart timer and play alaram sound\n    if (currentProps.secondsElapsed === 0 && currentProps.isBreakTime) {\n      this.alaramRef.current.play();\n      if (currentProps.isAutoStartON) {\n        currentProps.autoStartTimer();\n      } else {\n        clearInterval(this.timerID);\n        currentProps.resetTimer();\n      }\n    }\n    // sync elapsedSeconds with sessionLength on sessionLength update\n    if (!currentProps.isTimerRunning && !currentProps.isTimerPaused) {\n      currentProps.resetTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { sessionLength, secondsElapsed, isTimerRunning, isTimerPaused, isBreakTime } = this.props;\n    const { startTimer, stopTimer, resetTimer } = this.props;\n    return (\n      <div className=\"timer-container\">\n        <div className=\"timer\">\n          <Clock\n            sessionLength={sessionLength}\n            secondsElapsed={secondsElapsed}\n            isTimerRunning={isTimerRunning}\n            isTimerPaused={isTimerPaused}\n            isBreakTime={isBreakTime}\n          />\n          <ClockControls isTimerRunning={isTimerRunning} onStart={startTimer} onStop={stopTimer} onReset={resetTimer} />\n        </div>\n\n        <TimerSettings />\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio src={alaramSound} ref={this.alaramRef} />\n      </div>\n    );\n  }\n}\nPomodoroTimer.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  startTimer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.func.isRequired,\n};\nexport default PomodoroTimer;\n","import { connect } from 'react-redux';\nimport { startTimer, stopTimer, resetTimer, runTimer, startBreak, autoStartTimer } from '../actions';\nimport PomodoroTimer from '../components/Timer/PomodoroApp';\n\nconst mapStateToProps = state => ({\n  sessionLength: state.timer.sessionLength,\n  secondsElapsed: state.timer.secondsElapsed,\n  isTimerRunning: state.timer.isTimerRunning,\n  isTimerPaused: state.timer.isTimerPaused,\n  isBreakTime: state.timer.isBreakTime,\n  isAutoStartON: state.timer.isAutoStartON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startTimer: () => dispatch(startTimer()),\n  stopTimer: () => dispatch(stopTimer()),\n  resetTimer: () => dispatch(resetTimer()),\n  runTimer: () => dispatch(runTimer()),\n  startBreak: () => dispatch(startBreak()),\n  autoStartTimer: () => dispatch(autoStartTimer()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PomodoroTimer);\n","import idb from 'idb';\n\nfunction indexedDBConnection() {\n  if (!('indexedDB' in window)) {\n    return false;\n  }\n  const dbPromise = idb.open('todoDB', 1, upgradeDb => {\n    if (!upgradeDb.objectStoreNames.contains('todoStore')) {\n      const todoObjectStore = upgradeDb.createObjectStore('todoStore', { keyPath: 'id' });\n      todoObjectStore.createIndex('id', 'id', { unique: true });\n    }\n  });\n  return dbPromise;\n}\n\nexport default indexedDBConnection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoInputForm(props) {\n  const { onFormSubmit, onInputChange, text } = props;\n  return (\n    <form onSubmit={event => onFormSubmit(event)} className=\"todo-form\">\n      <input\n        type=\"text\"\n        value={text}\n        name=\"todo\"\n        placeholder=\"New task ...\"\n        className=\"todo-input\"\n        onChange={event => onInputChange(event)}\n      />\n      <input type=\"submit\" name=\"add-todo\" value=\"Add\" className=\"btn-add-todo\" />\n    </form>\n  );\n}\nTodoInputForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\nexport default TodoInputForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoFilter(props) {\n  const { filter, onFilterTasks } = props;\n  return (\n    <p className=\"todo-filter\">\n      <input\n        type=\"button\"\n        value=\"All\"\n        onClick={() => onFilterTasks('SHOW_ALL')}\n        style={filter === 'SHOW_ALL' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n      <input\n        type=\"button\"\n        value=\"Active\"\n        onClick={() => onFilterTasks('SHOW_ACTIVE')}\n        style={filter === 'SHOW_ACTIVE' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n      <input\n        type=\"button\"\n        value=\"Completed\"\n        onClick={() => onFilterTasks('SHOW_COMPLETED')}\n        style={filter === 'SHOW_COMPLETED' ? { background: '#a0099f', color: '#ffffff' } : {}}\n      />\n    </p>\n  );\n}\nTodoFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onFilterTasks: PropTypes.func.isRequired,\n};\nexport default TodoFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItems(props) {\n  const { tasks, onToggleTodo } = props;\n  return (\n    <ul className=\"todo-items\">\n      {tasks.length ? (\n        tasks.map(task => (\n          <li\n            key={task.id}\n            style={task.completed ? { textDecoration: 'line-through', textDecorationColor: '#a0099f' } : {}}\n          >\n            <label htmlFor={task.id}>\n              <input type=\"checkbox\" id={task.id} checked={task.completed} onChange={() => onToggleTodo(task.id)} />\n              <span />\n            </label>\n            {task.text}\n          </li>\n        ))\n      ) : (\n        <p className=\"no-tasks\">No tasks found</p>\n      )}\n    </ul>\n  );\n}\nTodoItems.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  onToggleTodo: PropTypes.func.isRequired,\n};\nexport default TodoItems;\n","import React from 'react';\nimport dBConnection from '../indexedDB';\nimport TodoInputForm from './TodoInputForm';\nimport TodoFilter from './TodoFilter';\nimport TodoItems from './TodoItems';\n\nimport './Todo.css';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      text: '',\n      tasks: [],\n      filter: 'SHOW_ALL',\n    };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleFilterTasks = this.handleFilterTasks.bind(this);\n    this.handleToggleTask = this.handleToggleTask.bind(this);\n    this.getVisibleTasks = this.getVisibleTasks.bind(this);\n  }\n\n  componentDidMount() {\n    this.dbPromise = dBConnection();\n    this.getAllTasksfromDB();\n  }\n\n  // filter todo tasks\n  getVisibleTasks(filter) {\n    const { tasks } = this.state;\n    switch (filter) {\n      case 'SHOW_ALL':\n        return tasks;\n      case 'SHOW_ACTIVE':\n        return tasks.filter(task => !task.completed);\n      case 'SHOW_COMPLETED':\n        return tasks.filter(task => task.completed);\n      default:\n        return tasks;\n    }\n  }\n\n  // get all saved tasks from indexedDB and update tasks array in state\n  getAllTasksfromDB() {\n    // retrieve from indexedDB\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readonly');\n        const store = tx.objectStore('todoStore');\n        return store.getAll();\n      })\n      // update state\n      .then(data => {\n        this.setState({\n          id: data.length ? data[data.length - 1].id : 0,\n          tasks: data,\n        });\n      });\n  }\n\n  // store todo task item in indexedDB and update tasks array in state\n  handleFormSubmit(e) {\n    const { text } = this.state;\n    const { id } = this.state;\n    e.preventDefault();\n    if (!text.trim()) {\n      return;\n    }\n    // save to indexedDB and update state\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readwrite');\n        const store = tx.objectStore('todoStore');\n        store.add({ id: id + 1, text, completed: false });\n        return tx.complete;\n      })\n      .then(\n        this.setState(state => ({\n          id: state.id + 1,\n          tasks: state.tasks.concat({ id: state.id + 1, text, completed: false }),\n          text: '',\n        }))\n      )\n      .catch(error => error);\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  handleFilterTasks(filter) {\n    this.setState({\n      filter,\n    });\n  }\n\n  // update task status:active|completed in state and indexedDB\n\n  handleToggleTask(id) {\n    const { tasks } = this.state;\n    this.setState(state => ({\n      tasks: state.tasks.map(task => (task.id === id ? { ...task, completed: !task.completed } : task)),\n    }));\n\n    this.dbPromise.then(db => {\n      const tx = db.transaction('todoStore', 'readwrite');\n      const store = tx.objectStore('todoStore');\n      store.put({ id, text: tasks[id - 1].text, completed: !tasks[id - 1].completed });\n      return tx.complete;\n    });\n  }\n\n  render() {\n    const { text, filter } = this.state;\n    const tasks = this.getVisibleTasks(filter);\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"todo-title\">To-Do</h1>\n        <TodoInputForm onFormSubmit={this.handleFormSubmit} onInputChange={this.handleInputChange} text={text} />\n        <TodoFilter filter={filter} onFilterTasks={this.handleFilterTasks} />\n        <TodoItems tasks={tasks} onToggleTodo={this.handleToggleTask} />\n      </div>\n    );\n  }\n}\nexport default Todo;\n","import React from 'react';\nimport Header from './Header';\nimport Quotes from '../containers/GetQuote';\nimport PomodoroTimer from '../containers/PomodoroTimer';\nimport Todo from './Todo/Todo';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Quotes />\n      <PomodoroTimer />\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}