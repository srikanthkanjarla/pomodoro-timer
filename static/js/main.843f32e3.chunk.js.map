{"version":3,"sources":["assets/alarm.mp3","reducers/timerReducer.js","reducers/quoteReducer.js","reducers/todoReducer.js","reducers/index.js","components/Header/Header.js","components/Quote/BreakTimeQuotes.js","components/Quote/QuotesAPI.js","components/Quote/Quotes.js","actions/index.js","containers/GetQuote.js","components/Timer/FormattedTime.js","components/Timer/Clock.js","components/Timer/Button.js","components/Timer/ClockControls.js","components/Timer/Settings.js","containers/TimerSettings.js","components/Timer/PomodoroApp.js","containers/PomodoroTimer.js","components/indexedDB.js","containers/AddTodo.js","components/Todo/TodoFilterLinks.js","containers/TodoFilter.js","components/Todo/Task.js","components/Todo/TodoItems.js","containers/VisibleTodoList.js","components/Todo/Notification.js","containers/ShowNotifications.js","components/Todo/Todo.js","containers/TodoApp.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","sessionLength","breakLength","clockTime","secondsElapsed","isTimerRunning","isTimerPaused","isBreakTime","isAlarmON","isAutoStartON","timerReducer","state","arguments","length","undefined","action","type","Object","objectSpread","value","parseInt","quoteText","quoteAuthor","quoteReducer","quote","text","author","filter","tasks","nextTodoId","showNotification","notifications","notificationId","todoReducer","todos","id","concat","todo","completed","map","task","item","combineReducers","timer","Header","react_default","a","createElement","className","breakTimeQuotes","randomNum","Math","round","random","END_POINT","callbackMethodName","getJsonp","script","document","src","body","appendChild","getElementById","remove","randomBreakTimeQuote","Quotes","getJSONP","_this$props","this","props","updateQuote","window","data","floor","React","Component","setNotifications","connect","dispatch","FormattedTime","time","minutes","seconds","title","Clock","Timer_FormattedTime","Button","assign","ClockControls","onStart","onStop","onReset","Timer_Button","name","onClick","hadleSessionLength","dispatchSessionUpdate","hadleBreakLength","dispatchBreakUpdate","PomodoroTimerSettings","updateSessionLength","updateBreakLength","toggleAlarmSound","toggleAutoStart","htmlFor","min","max","onChange","event","target","checked","TimerSettings","PomodoroTimer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","alarmRef","createRef","prevProps","currentProps","resetTimer","autoStartTimer","timerID","setInterval","runTimer","clearInterval","current","play","startBreak","timerId","_this$props2","startTimer","stopTimer","Timer_Clock","Timer_ClockControls","alarmSound","ref","indexedDBConnection","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","dbPromise","dBConnection","inputChange","updateInput","submitForm","addTodo","addNotification","status","onSubmit","e","preventDefault","trim","then","db","tx","transaction","objectStore","add","complete","placeholder","aria-label","TodoFilterLinks","setFilter","style","background","color","TodoFilter","Task","toggleTodo","deleteTodo","toggleTask","put","toggleTodoTask","delete","deleteTodoTask","TodoItems","Todo_Task","key","timeOutId","getVisibleTodos","Notifications","removeNotification","clearTimeout","message","setTimeout","Notification","Todo","syncStoreWithIDB","getAll","tasksCount","ShowNotifications","containers_AddTodo","VisibleTodoList","syncTodosDB","App","components_Header_Header","GetQuote","containers_PomodoroTimer","TodoApp","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qWCGlCC,EAAe,CACnBC,cAAe,GACfC,YAAa,EACbC,UAAW,KACXC,eAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfC,aAAa,EACbC,WAAW,EACXC,eAAe,GA+EFC,MA3Ef,WAAoD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBZ,EAAce,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQC,EAAOC,MAEb,IAAK,cACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,gBAAgB,EAChBC,eAAe,IAEnB,IAAK,aACH,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,gBAAgB,EAChBC,eAAe,IAEnB,IAAK,cACH,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,gBAAgB,EAChBC,eAAe,EACfC,aAAa,EACbJ,UAAmC,KAAxBQ,EAAMV,cAA6C,GAAtBU,EAAMV,cAAqB,KACnEG,eAAgB,IAEpB,IAAK,YACH,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEP,eAAgBO,EAAMP,eAAiB,IAE3C,IAAK,cACH,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEP,eAAgB,EAChBD,UAA+B,GAApBQ,EAAMT,YACjBK,aAAa,IAEjB,IAAK,mBACH,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,gBAAgB,IAKpB,IAAK,wBACH,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEV,cAAgC,KAAjBc,EAAOI,MAAeC,SAASL,EAAOI,MAAO,IAAM,GAClEhB,UACGQ,EAAMN,gBAAmBM,EAAML,eAAkC,KAAjBS,EAAOI,MAEpDR,EAAMR,UADuB,GAA7BiB,SAASL,EAAOI,MAAO,MAIjC,IAAK,sBACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEET,YAA8B,KAAjBa,EAAOI,MAAeC,SAASL,EAAOI,MAAO,IAAM,KAEpE,IAAK,qBACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,WAAYG,EAAMH,YAEvC,IAAK,oBACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEF,eAAgBE,EAAMF,gBAG1B,QACE,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFN,KCtFLX,EAAe,CACnBqB,UAAW,qDACXC,YAAa,aAYAC,MATf,WAAoD,IAA9BZ,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBZ,EAAce,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQC,EAAOC,MACb,IAAK,eACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBU,UAAWN,EAAOS,MAAMC,KAAMH,YAAaP,EAAOS,MAAME,SAC7E,QACE,OAAOT,OAAAC,EAAA,EAAAD,CAAA,GAAKN,KCVZX,EAAe,CACnByB,KAAM,GACNE,OAAQ,WACRC,MAAO,GACPC,WAAY,EACZC,kBAAkB,EAClBC,cAAe,GACfC,eAAgB,GA2CHC,MAzCf,WAAmD,IAA9BtB,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBZ,EAAce,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,OAAQC,EAAOC,MACb,IAAK,eACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBiB,MAAOb,EAAOmB,MAAOL,WAAYd,EAAOoB,KAC7D,IAAK,WACH,OAAOlB,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEc,KAAM,GACNG,MAAOjB,EAAMiB,MAAMQ,OAAO,CAAED,GAAIxB,EAAMkB,WAAYJ,KAAMV,EAAOsB,KAAMC,WAAW,IAChFT,WAAYlB,EAAMkB,WAAa,IAEnC,IAAK,eACH,OAAOZ,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBc,KAAMV,EAAOU,OAClC,IAAK,cACH,OAAOR,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEiB,MAAOjB,EAAMiB,MAAMW,IAAI,SAAAC,GAAI,OAAKA,EAAKL,KAAOpB,EAAOoB,GAAnBlB,OAAAC,EAAA,EAAAD,CAAA,GAA6BuB,EAA7B,CAAmCF,WAAYE,EAAKF,YAApDrB,OAAAC,EAAA,EAAAD,CAAA,GAAuEuB,OAE3G,IAAK,cACH,OAAOvB,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBiB,MAAOjB,EAAMiB,MAAMD,OAAO,SAAAc,GAAI,OAAIA,EAAKN,KAAOpB,EAAOoB,OAC1E,IAAK,kBACH,OAAOlB,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBgB,OAAQZ,EAAOY,SAEpC,IAAK,oBACH,OAAOV,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEoB,cAAepB,EAAMoB,cAAcK,OAAO,CAAED,GAAIxB,EAAMqB,eAAgBP,KAAMV,EAAOU,OACnFO,eAAgBrB,EAAMqB,eAAiB,IAE3C,IAAK,yBACH,OAAOf,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBmB,kBAAkB,IACvC,IAAK,sBACH,OAAOb,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEoB,cAAepB,EAAMoB,cAAcJ,OAAO,SAAAc,GAAI,OAAIA,EAAKN,KAAOpB,EAAOoB,OAEzE,QACE,OAAOlB,OAAAC,EAAA,EAAAD,CAAA,GAAKN,KCxCH+B,cAAgB,CAC7BC,MAAOjC,EACPc,MAAOD,EACPc,KAAMJ,gBCCOW,MAPf,WACE,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,iECOSE,EAbS,CACtB,0BACA,qCACA,mBACA,yBACA,kDACA,cACA,sCACA,yBACA,sCACA,yBCTIC,EAAYC,KAAKC,MAAM,IAAQD,KAAKE,UACpCC,EAAY,6FACLC,EAAkB,MAAAnB,OAASc,GAGzB,SAASM,IACtB,IAAMC,EAASC,SAASX,cAAc,UACtCU,EAAOtB,GAAP,UAAAC,OAAsBmB,GACtBE,EAAOE,IAAML,EAAYC,EACzBG,SAASE,KAAKC,YAAYJ,GAC1BC,SAASI,eAAeL,EAAOtB,IAAI4B,mBCLjCC,EAAuB,GA0CZC,8LArCXC,qCAGO,IAAAC,EACsEC,KAAKC,MAA1E9D,EADD4D,EACC5D,YAAac,EADd8C,EACc9C,UAAWC,EADzB6C,EACyB7C,YAAalB,EADtC+D,EACsC/D,eAAgBkE,EADtDH,EACsDG,YAY7D,OAVAC,OAAOhB,GAAsB,SAAAiB,GAC3BF,EAAY,CAAE7C,KAAM+C,EAAKnD,UAAWK,OAAQ8C,EAAKlD,eAG5B,IAAnBlB,GAAwBG,IAC1B2D,IAEAF,EAAuBf,EAAgBE,KAAKsB,MAAMtB,KAAKE,SAAWJ,EAAgBpC,UAIlFgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZzC,EACCsC,EAAAC,EAAAC,cAAA,UAAKiB,GAELnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAc3B,GAC3BwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgB1B,YAzBpBoD,IAAMC,WCgGdC,EAAmB,SAAAnD,GAAI,MAAK,CACvCT,KArFwB,oBAsFxBS,SC7FaoD,cAVS,SAAAlE,GAAK,MAAK,CAChCU,UAAWV,EAAMa,MAAMH,UACvBC,YAAaX,EAAMa,MAAMF,YACzBf,YAAaI,EAAMgC,MAAMpC,YACzBH,eAAgBO,EAAMgC,MAAMvC,iBAGH,SAAA0E,GAAQ,MAAK,CACtCR,YAAa,SAAA9C,GAAK,OAAIsD,EDyDG,SAAAtD,GAAK,MAAK,CACnCR,KAzDmB,eA0DnBQ,SC3D+B8C,CAAY9C,OAE9BqD,CAGbZ,GCFac,MAZf,SAAuBV,GAAO,IACpBW,EAASX,EAATW,KACFC,EAAU9B,KAAKsB,MAAMO,EAAO,IAC5BE,EAAU/B,KAAKsB,MAAMO,EAAO,IAC5B7E,EAAS,GAAAiC,OAAM6C,EAAU,GAAV,IAAA7C,OAAmB6C,GAAYA,EAArC,OAAA7C,OAAkD8C,EAAU,GAAV,IAAA9C,OAAmB8C,GAAYA,GAGhG,OADAxB,SAASyB,MAAQhF,EACV0C,EAAAC,EAAAC,cAAA,SAAI5C,ICaEiF,MAnBf,SAAef,GAAO,IAEdW,EADgCX,EAA9BlE,UAA8BkE,EAAnBjE,eAEnB,OACEyC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACsC,EAAD,CAAeL,KAAMA,eCNlBM,MAHf,SAAgBjB,GACd,OAAOxB,EAAAC,EAAAC,cAAA,QAAA9B,OAAAsE,OAAA,CAAOvE,KAAK,UAAaqD,KCoBnBmB,MApBf,SAAuBnB,GAAO,IACpBhE,EAA6CgE,EAA7ChE,eAAgBoF,EAA6BpB,EAA7BoB,QAASC,EAAoBrB,EAApBqB,OAAQC,EAAYtB,EAAZsB,QACzC,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZ3C,EACCwC,EAAAC,EAAAC,cAAC6C,EAAD,CAAQC,KAAK,OAAO1E,MAAM,QAAQ6B,UAAU,MAAM8C,QAASJ,IAE3D7C,EAAAC,EAAAC,cAAC6C,EAAD,CAAQC,KAAK,QAAQ1E,MAAM,QAAQ6B,UAAU,MAAM8C,QAASL,IAE9D5C,EAAAC,EAAAC,cAAC6C,EAAD,CAAQC,KAAK,QAAQ1E,MAAM,QAAQ6B,UAAU,MAAM8C,QAASH,YCRlE,SAASI,EAAmB5E,EAAO6E,IAC5B7E,EAAQ,GAAKA,GAAS,IAAiB,KAAVA,IAChC6E,EAAsB7E,GAK1B,SAAS8E,EAAiB9E,EAAO+E,IAC1B/E,EAAQ,GAAKA,GAAS,IAAiB,KAAVA,IAChC+E,EAAoB/E,GA+FTgF,MA3Ff,SAA+B9B,GAAO,IAC5BpE,EAAyDoE,EAAzDpE,cAAeC,EAA0CmE,EAA1CnE,YAAaM,EAA6B6D,EAA7B7D,UAAWC,EAAkB4D,EAAlB5D,cACvC2F,EAA8E/B,EAA9E+B,oBAAqBC,EAAyDhC,EAAzDgC,kBAAmBC,EAAsCjC,EAAtCiC,iBAAkBC,EAAoBlC,EAApBkC,gBAClE,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOyD,QAAQ,WAAf,iBAEE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACL6E,KAAK,oBACL1E,MAAM,IACN2E,QAAS,kBAAMC,EAAmB9F,EAAgB,EAAGmG,MAGvDvD,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACLmB,GAAG,UACHsE,IAAI,IACJC,IAAI,KACJvF,MAAOlB,EACP4F,KAAK,iBACLc,SAAU,SAAAC,GAAK,OAAIb,EAAmBa,EAAMC,OAAO1F,MAAOiF,MAG5DvD,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACL6E,KAAK,kBACL1E,MAAM,IACN2E,QAAS,kBAAMC,EAAmB9F,EAAgB,EAAGmG,SAK7DvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOyD,QAAQ,SAAf,eAEE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACL6E,KAAK,kBACL1E,MAAM,IACN2E,QAAS,kBAAMG,EAAiB/F,EAAc,EAAGmG,MAEnDxD,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACLmB,GAAG,QACHsE,IAAI,IACJC,IAAI,KACJvF,MAAOjB,EACP2F,KAAK,eACLc,SAAU,SAAAC,GAAK,OAAIX,EAAiBW,EAAMC,OAAO1F,MAAOkF,MAE1DxD,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACL6E,KAAK,gBACL1E,MAAM,IACN2E,QAAS,kBAAMG,EAAiB/F,EAAc,EAAGmG,SAKzDxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SAAOyD,QAAQ,UACb3D,EAAAC,EAAAC,cAAA,SAAO/B,KAAK,WAAWmB,GAAG,SAAS0D,KAAK,eAAeiB,QAAStG,EAAWmG,SAAUL,IACrFzD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAFlB,UAMFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,SAAOyD,QAAQ,cACb3D,EAAAC,EAAAC,cAAA,SAAO/B,KAAK,WAAWmB,GAAG,aAAa0D,KAAK,YAAYiB,QAASrG,EAAekG,SAAUJ,IAC1F1D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAFlB,mBCrEO6B,cAjBS,SAAAlE,GAAK,MAAK,CAChCV,cAAeU,EAAMgC,MAAM1C,cAC3BC,YAAaS,EAAMgC,MAAMzC,YACzBM,UAAWG,EAAMgC,MAAMnC,UACvBC,cAAeE,EAAMgC,MAAMlC,gBAGF,SAAAqE,GAAQ,MAAK,CACtCsB,oBAAqB,SAAAjF,GACnB2D,EPqC+B,SAAA3D,GAAK,MAAK,CAC3CH,KA3C4B,wBA4C5BG,SOvCWiF,CAAoBjF,KAE/BkF,kBAAmB,SAAAlF,GACjB2D,EPuC6B,SAAA3D,GAAK,MAAK,CACzCH,KA/C0B,sBAgD1BG,SOzCWkF,CAAkBlF,KAE7BmF,iBAAkB,kBAAMxB,EP0Ca,CACrC9D,KAnDyB,wBOSzBuF,gBAAiB,kBAAMzB,EP6Ca,CACpC9D,KAtDwB,yBOUX6D,CAGbkC,4BCyEaC,cAxFb,SAAAA,EAAY3C,GAAO,IAAA4C,EAAA,OAAAhG,OAAAiG,EAAA,EAAAjG,CAAAmD,KAAA4C,IACjBC,EAAAhG,OAAAkG,EAAA,EAAAlG,CAAAmD,KAAAnD,OAAAmG,EAAA,EAAAnG,CAAA+F,GAAAK,KAAAjD,KAAMC,KACDiD,SAAW5C,IAAM6C,YAFLN,kFAKAO,GACjB,IAAMC,EAAerD,KAAKC,MAExBjE,EAOEqH,EAPFrH,eACAD,EAMEsH,EANFtH,UACAI,EAKEkH,EALFlH,YACAE,EAIEgH,EAJFhH,cACAiH,EAGED,EAHFC,WACAC,EAEEF,EAFFE,eACAnH,EACEiH,EADFjH,UAIEiH,EAAapH,iBAAmBmH,EAAUnH,iBAC5C+D,KAAKwD,QAAUC,YAAY,WACzBJ,EAAaK,YACZ,OAIAL,EAAapH,gBAAkBmH,EAAUnH,gBAC5C0H,cAAc3D,KAAKwD,SAIjBxH,IAAmBD,GAAcI,IAC/BC,GACF4D,KAAKkD,SAASU,QAAQC,OAExBR,EAAaS,cAIX9H,IAAmBD,GAAaI,IAC9BC,GACF4D,KAAKkD,SAASU,QAAQC,OAExBP,IACIjH,EACFkH,IAEAI,cAAc3D,KAAKwD,yDAMvBG,cAAc3D,KAAK+D,0CAGZ,IAAAhE,EAC2EC,KAAKC,MAA/ElE,EADDgE,EACChE,UAAWC,EADZ+D,EACY/D,eAAgBC,EAD5B8D,EAC4B9D,eAAgBC,EAD5C6D,EAC4C7D,cAAeC,EAD3D4D,EAC2D5D,YAD3D6H,EAEuChE,KAAKC,MAA3CgE,EAFDD,EAECC,WAAYC,EAFbF,EAEaE,UAAWZ,EAFxBU,EAEwBV,WAC/B,OACE7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACwF,EAAD,CACEpI,UAAWA,EACXC,eAAgBA,EAChBC,eAAgBA,EAChBC,cAAeA,EACfC,YAAaA,IAEfsC,EAAAC,EAAAC,cAACyF,EAAD,CAAenI,eAAgBA,EAAgBoF,QAAS4C,EAAY3C,OAAQ4C,EAAW3C,QAAS+B,KAGlG7E,EAAAC,EAAAC,cAACgE,EAAD,MAEAlE,EAAAC,EAAAC,cAAA,SAAOY,IAAK8E,IAAYC,IAAKtE,KAAKkD,mBA1Ed5C,IAAMC,WCcnBE,cAlBS,SAAAlE,GAAK,MAAK,CAChCR,UAAWQ,EAAMgC,MAAMxC,UACvBC,eAAgBO,EAAMgC,MAAMvC,eAC5BC,eAAgBM,EAAMgC,MAAMtC,eAC5BC,cAAeK,EAAMgC,MAAMrC,cAC3BC,YAAaI,EAAMgC,MAAMpC,YACzBE,cAAeE,EAAMgC,MAAMlC,cAC3BD,UAAWG,EAAMgC,MAAMnC,YAGE,SAAAsE,GAAQ,MAAK,CACtCuD,WAAY,kBAAMvD,ETWa,CAC/B9D,KAzBkB,iBSclBsH,UAAW,kBAAMxD,ETkBa,CAC9B9D,KA/BiB,gBSajB0G,WAAY,kBAAM5C,ETqBa,CAC/B9D,KAlCkB,iBSalB8G,SAAU,kBAAMhD,ETYa,CAC7B9D,KA5BgB,eSgBhBkH,WAAY,kBAAMpD,ETuBa,CAC/B9D,KArCkB,iBSclB2G,eAAgB,kBAAM7C,ET0Ba,CACnC9D,KAxCuB,wBSeV6D,CAGbmC,oBCVa2B,MAbf,WACE,MAAM,cAAepE,QAGHqE,IAAIC,KAAK,SAAU,EAAG,SAAAC,GACjCA,EAAUC,iBAAiBC,SAAS,cACfF,EAAUG,kBAAkB,YAAa,CAAEC,QAAS,OAC5DC,YAAY,KAAM,KAAM,CAAEC,QAAQ,OCHlDC,EAAYC,IAmDlB,IASezE,cATS,SAAAlE,GAAK,MAAK,CAChCwB,GAAIxB,EAAM0B,KAAKR,WACfJ,KAAMd,EAAM0B,KAAKZ,OAEQ,SAAAqD,GAAQ,MAAK,CACtCyE,YAAa,SAAA9H,GAAI,OAAIqD,EXoBI,SAAArD,GAAI,MAAK,CAClCT,KA/DmB,eAgEnBS,QWtB8B+H,CAAY/H,KAC1CgI,WAAY,SAAApH,GAAI,OAAIyC,EXwBC,SAAAzC,GAAI,MAAK,CAC9BrB,KAxEe,WAyEfqB,QW1B6BqH,CAAQrH,KACrCsH,gBAAiB,SAAClI,EAAMmI,GAAP,OAAkB9E,EAASF,EAAiBnD,OAEhDoD,CA3Df,SAAiBR,GAAO,IACdlC,EAAuDkC,EAAvDlC,GAAIV,EAAmD4C,EAAnD5C,KAAM8H,EAA6ClF,EAA7CkF,YAAaE,EAAgCpF,EAAhCoF,WAAYE,EAAoBtF,EAApBsF,gBAC3C,OACE9G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QACE8G,SAAU,SAAAC,GACRA,EAAEC,iBACGtI,EAAKuI,SAIVP,EAAWhI,GAEX4H,EACGY,KAAK,SAAAC,GACJ,IAAMC,EAAKD,EAAGE,YAAY,YAAa,aAGvC,OAFcD,EAAGE,YAAY,aACvBC,IAAI,CAAEnI,KAAIV,OAAMa,WAAW,IAC1B6H,EAAGI,WAEXN,KAAK,WAEJN,EAAgB,0BAGtB3G,UAAU,aAEVH,EAAAC,EAAAC,cAAA,SACE/B,KAAK,OACLG,MAAOM,EACPoE,KAAK,OACL1D,GAAG,WACHqI,YAAY,eACZxH,UAAU,aACVyH,aAAW,eACX9D,SAAU,SAAAC,GAAK,OAAI2C,EAAY3C,EAAMC,OAAO1F,UAE9C0B,EAAAC,EAAAC,cAAA,SAAO/B,KAAK,SAAS6E,KAAK,WAAW1E,MAAM,MAAM6B,UAAU,qBCXpD0H,MA9Bf,SAAyBrG,GAAO,IACtB1C,EAAsB0C,EAAtB1C,OAAQgJ,EAActG,EAAdsG,UACVC,EAAQ,CAAEC,WAAY,uBAAwBC,MAAO,WAC3D,OACEjI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACLG,MAAM,MACN2E,QAAS,kBAAM6E,EAAU,aACzBC,MAAkB,aAAXjJ,EAAwBiJ,EAAQ,OAEzC/H,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACLG,MAAM,SACN2E,QAAS,kBAAM6E,EAAU,gBACzBC,MAAkB,gBAAXjJ,EAA2BiJ,EAAQ,OAE5C/H,EAAAC,EAAAC,cAAA,SACE/B,KAAK,SACLG,MAAM,YACN2E,QAAS,kBAAM6E,EAAU,mBACzBC,MAAkB,mBAAXjJ,EAA8BiJ,EAAQ,SCbtC/F,cAPS,SAAAlE,GAAK,MAAK,CAChCgB,OAAQhB,EAAM0B,KAAKV,SAGM,SAAAmD,GAAQ,MAAK,CACtC6F,UAAW,SAAAhJ,GAAM,OAAImD,Eb2FE,SAAAnD,GAAM,MAAK,CAClCX,KAlFsB,kBAmFtBW,Ua7F8BgJ,CAAUhJ,OAE3BkD,CAGbkG,GCTI1B,EAAYC,IAgEH0B,MA5Bf,SAAc3G,GAAO,IACXlC,EAAkEkC,EAAlElC,GAAIG,EAA8D+B,EAA9D/B,UAAWb,EAAmD4C,EAAnD5C,KAAMwJ,EAA6C5G,EAA7C4G,WAAYC,EAAiC7G,EAAjC6G,WAAYtG,EAAqBP,EAArBO,iBACrD,OACE/B,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAZ,OAAKE,EAAS,iBAAsB,OAC/CO,EAAAC,EAAAC,cAAA,SAAOyD,QAASrE,GACdU,EAAAC,EAAAC,cAAA,SACE/B,KAAK,WACLmB,GAAIA,EACJ2E,QAASxE,EACTqE,SAAU,kBA3CpB,SAAwBxE,EAAIV,EAAMa,EAAW6I,EAAYvG,GAEvDuG,EAAWhJ,GAEXkH,EACGY,KAAK,SAAAC,GACJ,IAAMC,EAAKD,EAAGE,YAAY,YAAa,aAGvC,OAFcD,EAAGE,YAAY,aACvBe,IAAI,CAAEjJ,KAAIV,OAAMa,WAAYA,IAC3B6H,EAAGI,WAGXN,KAAK,WACJrF,EAAiBtC,EAAY,wBAA0B,6BA8BnC+I,CAAelJ,EAAIV,EAAMa,EAAW2I,EAAYrG,MAElE/B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACfvB,GAEHoB,EAAAC,EAAAC,cAAA,UAAQ/B,KAAK,SAASgC,UAAU,aAAa8C,QAAS,kBA/B5D,SAAwB3D,EAAI+I,EAAYtG,GAEtCsG,EAAW/I,GAEXkH,EACGY,KAAK,SAAAC,GACJ,IAAMC,EAAKD,EAAGE,YAAY,YAAa,aAGvC,OAFcD,EAAGE,YAAY,aACvBiB,OAAOnJ,GACNgI,EAAGI,WAGXN,KAAK,WACJrF,EAAiB,+BAkB2C2G,CAAepJ,EAAI+I,EAAYtG,KAA3F,OCdS4G,MArCf,SAAmBnH,GAAO,IAChBzC,EAAoDyC,EAApDzC,MAAOqJ,EAA6C5G,EAA7C4G,WAAYC,EAAiC7G,EAAjC6G,WAAYtG,EAAqBP,EAArBO,iBACvC,OAEE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZpB,EAAMf,OACLgC,EAAAC,EAAAC,cAAA,UACGnB,EAAMW,IAAI,SAAAC,GAAI,OACbK,EAAAC,EAAAC,cAAC0I,EAAD,CACEC,IAAKlJ,EAAKL,GACVA,GAAIK,EAAKL,GACTG,UAAWE,EAAKF,UAChBb,KAAMe,EAAKf,KACXwJ,WAAYA,EACZC,WAAYA,EACZtG,iBAAkBA,OAKxB/B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,6BCRR,ICZI2I,GDqBW9G,eATS,SAAAlE,GAAK,MAAK,CAChCiB,MAbF,SAAyBM,EAAOP,GAC9B,OAAQA,GACN,IAAK,WACH,OAAOO,EACT,IAAK,cACH,OAAOA,EAAMP,OAAO,SAAAa,GAAI,OAAKA,EAAKF,YACpC,IAAK,iBACH,OAAOJ,EAAMP,OAAO,SAAAa,GAAI,OAAIA,EAAKF,YACnC,QACE,OAAOJ,GAIJ0J,CAAgBjL,EAAM0B,KAAKT,MAAOjB,EAAM0B,KAAKV,UAG3B,SAAAmD,GAAQ,MAAK,CACtCmG,WAAY,SAAA9I,GAAE,OAAI2C,EhBuEM,SAAA3C,GAAE,MAAK,CAC/BnB,KA5EkB,cA6ElBmB,MgBzE2B8I,CAAW9I,KACtC+I,WAAY,SAAA/I,GAAE,OAAI2C,EhB0EM,SAAA3C,GAAE,MAAK,CAC/BnB,KA/EkB,cAgFlBmB,MgB5E2B+I,CAAW/I,KACtCyC,iBAAkB,SAAAzC,GAAE,OAAI2C,EAASF,EAAiBzC,OAErC0C,CAGb2G,SCQaK,OA/Bf,SAAuBxH,GAAO,IACpByH,EAAsCzH,EAAtCyH,mBAAoB/J,EAAkBsC,EAAlBtC,cAI5B,OAHKA,EAAclB,QACjBkL,aAAaJ,IAGb9I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZjB,EAAcQ,IAAI,SAAAyJ,GAMjB,OAJAL,GAAYM,WAAW,WACrBH,EAAmBE,EAAQ7J,KAC1B,KAGDU,EAAAC,EAAAC,cAAA,KAAG2I,IAAKM,EAAQ7J,GAAIa,UAAU,YAC3BgJ,EAAQvK,UCRNoD,eARS,SAAAlE,GAAK,MAAK,CAChCmL,mBAAoBnL,EAAM0B,KAAKyJ,mBAC/B/J,cAAepB,EAAM0B,KAAKN,gBAGD,SAAA+C,GAAQ,MAAK,CACtCgH,mBAAoB,SAAA3J,GAAE,OAAI2C,ElBmGM,SAAA3C,GAAE,MAAK,CACvCnB,KAxF0B,sBAyF1BmB,MkBrGmC2J,CAAmB3J,OAEzC0C,CAGbqH,ICmCaC,sMAxCO,IAAAhI,EAC6BC,KAAKC,MAA5C+H,EADUjI,EACViI,iBAAkBxH,EADRT,EACQS,iBAE1BR,KAAKiF,UAAYC,IAEjBlF,KAAKiF,UACFY,KAAK,SAAAC,GAGJ,OAFWA,EAAGE,YAAY,YAAa,YACtBC,YAAY,aAChBgC,WAGdpC,KAAK,SAAAzF,GACJ,IAAMrC,EAAKqC,EAAK3D,OAAS2D,EAAKA,EAAK3D,OAAS,GAAGsB,GAAK,EAAI,EAExD,OADAiK,EAAiBjK,EAAIqC,GACdA,EAAK3D,SAGboJ,KAAK,SAAAqC,GAEJ1H,EADY0H,EAAa,8BAAgC,8DAM7D,OACEzJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACwJ,GAAD,MACA1J,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,SACAH,EAAAC,EAAAC,cAACyJ,EAAD,MACA3J,EAAAC,EAAAC,cAACgI,EAAD,MACAlI,EAAAC,EAAAC,cAAC0J,GAAD,cAhCW/H,IAAMC,YCIVE,eARS,SAAAlE,GAAK,MAAK,CAChCoB,cAAepB,EAAM0B,KAAKN,gBAED,SAAA+C,GAAQ,MAAK,CACtCsH,iBAAkB,SAACjK,EAAID,GAAL,OAAe4C,EpBmER,SAAC3C,EAAID,GAAL,MAAgB,CACzClB,KA9DmB,eA+DnBmB,KACAD,SoBtE0CwK,CAAYvK,EAAID,KAC1D0C,iBAAkB,SAACnD,EAAMmI,GAAP,OAAkB9E,EAASF,EAAiBnD,OAGjDoD,CAGbsH,UCQaQ,OAhBf,WACE,OACE9J,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC6J,EAAD,MACA/J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC8J,EAAD,MACAhK,EAAAC,EAAAC,cAAC+J,EAAD,QAIJjK,EAAAC,EAAAC,cAACgK,GAAD,QCPAC,GAAcC,QACW,cAA7B1I,OAAO2I,SAASC,UAEe,UAA7B5I,OAAO2I,SAASC,UAEhB5I,OAAO2I,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrD,KAAK,SAAA0D,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlN,QACf6M,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,SAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCpFjE,IAAMC,GAAQC,YAAYC,EAAalK,OAAOmK,8BAAgCnK,OAAOmK,gCAErFC,IAASC,OACP/L,EAAAC,EAAAC,cAAC8L,EAAA,EAAD,CAAUN,MAAOA,IACf1L,EAAAC,EAAAC,cAAC+L,GAAD,OAEFpL,SAASI,eAAe,SDOnB,SAAkByJ,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,kBAAwBzK,OAAO2I,UAC3C+B,SAAW1K,OAAO2I,SAAS+B,OAIvC,OAGF1K,OAAO2K,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAAlL,OAAM4M,kBAAN,sBAEPhC,IA6DV,SAAiCM,EAAOC,GAEtC4B,MAAM7B,GACHrD,KAAK,SAAAmF,GAGkB,MAApBA,EAASxF,SACuD,IAAhEwF,EAASC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAMvF,KAAK,SAAA0D,GACjCA,EAAa8B,aAAaxF,KAAK,WAC7B1F,OAAO2I,SAASwC,aAKpBrC,GAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEAjFAyB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAMvF,KAAK,WACjCgE,QAAQC,IACN,+GAMJb,GAAgBC,EAAOC,MCjC/BE","file":"static/js/main.843f32e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.4b9995ee.mp3\";","// sessionLength, breakLength in minutes\n// clockTime,secondsElapsed in seconds\n\nconst initialState = {\n  sessionLength: 25,\n  breakLength: 5,\n  clockTime: 1500,\n  secondsElapsed: 0,\n  isTimerRunning: false,\n  isTimerPaused: false,\n  isBreakTime: false,\n  isAlarmON: true,\n  isAutoStartON: true,\n};\n\n/* reducer */\nfunction timerReducer(state = initialState, action) {\n  switch (action.type) {\n    /* Clock state */\n    case 'START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n        isTimerPaused: false,\n      };\n    case 'STOP_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: true,\n      };\n    case 'RESET_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: false,\n        isBreakTime: false,\n        clockTime: state.sessionLength !== '' ? state.sessionLength * 60 : 1500, // in seconds\n        secondsElapsed: 0,\n      };\n    case 'RUN_TIMER':\n      return {\n        ...state,\n        secondsElapsed: state.secondsElapsed + 1,\n      };\n    case 'START_BREAK':\n      return {\n        ...state,\n        secondsElapsed: 0,\n        clockTime: state.breakLength * 60,\n        isBreakTime: true,\n      };\n    case 'AUTO_START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n      };\n\n    /* Clock settings */\n    // update clockTime if timer not running - to reflect updated time in Clock\n    case 'UPDATE_SESSION_LENGTH':\n      return {\n        ...state,\n        sessionLength: action.value !== '' ? parseInt(action.value, 10) : '',\n        clockTime:\n          !state.isTimerRunning && !state.isTimerPaused && action.value !== ''\n            ? parseInt(action.value, 10) * 60\n            : state.clockTime,\n      };\n\n    case 'UPDATE_BREAK_LENGTH':\n      return {\n        ...state,\n        breakLength: action.value !== '' ? parseInt(action.value, 10) : '',\n      };\n    case 'TOGGLE_ALARM_SOUND':\n      return { ...state, isAlarmON: !state.isAlarmON };\n\n    case 'TOGGLE_AUTO_START':\n      return {\n        ...state,\n        isAutoStartON: !state.isAutoStartON,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n\nexport default timerReducer;\n","const initialState = {\n  quoteText: 'To hell with circumstances; I create opportunities',\n  quoteAuthor: 'Bruce Lee',\n};\n\nfunction quoteReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'UPDATE_QUOTE':\n      return { ...state, quoteText: action.quote.text, quoteAuthor: action.quote.author };\n    default:\n      return { ...state };\n  }\n}\n\nexport default quoteReducer;\n","const initialState = {\n  text: '',\n  filter: 'SHOW_ALL',\n  tasks: [],\n  nextTodoId: 0,\n  showNotification: false,\n  notifications: [],\n  notificationId: 0,\n};\nfunction todoReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SYNC_TODO_DB':\n      return { ...state, tasks: action.todos, nextTodoId: action.id };\n    case 'ADD_TODO':\n      return {\n        ...state,\n        text: '',\n        tasks: state.tasks.concat({ id: state.nextTodoId, text: action.todo, completed: false }),\n        nextTodoId: state.nextTodoId + 1,\n      };\n    case 'UPDATE_INPUT':\n      return { ...state, text: action.text };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        tasks: state.tasks.map(task => (task.id === action.id ? { ...task, completed: !task.completed } : { ...task })),\n      };\n    case 'DELETE_TODO':\n      return { ...state, tasks: state.tasks.filter(item => item.id !== action.id) };\n    case 'SET_TODO_FILTER':\n      return { ...state, filter: action.filter };\n\n    case 'SET_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: state.notifications.concat({ id: state.notificationId, text: action.text }),\n        notificationId: state.notificationId + 1,\n      };\n    case 'SET_SHOW_NOTIFICATIONS':\n      return { ...state, showNotification: true };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(item => item.id !== action.id),\n      };\n    default:\n      return { ...state };\n  }\n}\n\nexport default todoReducer;\n","import { combineReducers } from 'redux';\n\nimport timerReducer from './timerReducer';\nimport quoteReducer from './quoteReducer';\nimport todoReducer from './todoReducer';\n\nexport default combineReducers({\n  timer: timerReducer,\n  quote: quoteReducer,\n  todo: todoReducer,\n});\n","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Pomodoro Timer</h1>\n    </header>\n  );\n}\nexport default Header;\n","const breakTimeQuotes = [\n  \"It's ok to take a break\",\n  'Take a coffee break,you deserve it',\n  'Time for a break',\n  'Relax Refresh Recharge',\n  'The best therapy is taking a break from routine',\n  'Coffee time',\n  'Take a Break, it&apos;s Coffee Time',\n  'Relax and Take a Break',\n  'Breaks are the best part of working',\n  'Enjoy Your Break Time',\n];\n\nexport default breakTimeQuotes;\n","// JSONP to get quote from API\nconst randomNum = Math.round(10000 * Math.random());\nconst END_POINT = 'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=';\nexport const callbackMethodName = `cb_${randomNum}`;\n\n// JSONP function to get data from API\nexport default function getJsonp() {\n  const script = document.createElement('script');\n  script.id = `script_${callbackMethodName}`;\n  script.src = END_POINT + callbackMethodName;\n  document.body.appendChild(script);\n  document.getElementById(script.id).remove();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport breakTimeQuotes from './BreakTimeQuotes';\nimport getJSONP, { callbackMethodName } from './QuotesAPI';\nimport './Quotes.css';\n\nlet randomBreakTimeQuote = '';\n\n// Quotes component\nclass Quotes extends React.Component {\n  componentDidMount() {\n    getJSONP();\n  }\n\n  render() {\n    const { isBreakTime, quoteText, quoteAuthor, secondsElapsed, updateQuote } = this.props;\n    // JSONP callback function\n    window[callbackMethodName] = data => {\n      updateQuote({ text: data.quoteText, author: data.quoteAuthor });\n    };\n    // get a new quote after the break time\n    if (secondsElapsed === 0 && isBreakTime) {\n      getJSONP();\n      // random key to read a quote from BreakTimeQuotes\n      randomBreakTimeQuote = breakTimeQuotes[Math.floor(Math.random() * breakTimeQuotes.length)];\n    }\n\n    return (\n      <div className=\"quote-container\">\n        {isBreakTime ? (\n          <h2>{randomBreakTimeQuote}</h2>\n        ) : (\n          <div>\n            <p className=\"quote-text\">{quoteText}</p>\n            <p className=\"quote-author\">{quoteAuthor}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nQuotes.propTypes = {\n  isBreakTime: PropTypes.bool.isRequired,\n  quoteText: PropTypes.string.isRequired,\n  quoteAuthor: PropTypes.string.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  updateQuote: PropTypes.func.isRequired,\n};\nexport default Quotes;\n","// action constants\n// timer constants\nconst START_TIMER = 'START_TIMER';\nconst RUN_TIMER = 'RUN_TIMER';\nconst STOP_TIMER = 'STOP_TIMER';\nconst RESET_TIMER = 'RESET_TIMER';\nconst START_BREAK = 'START_BREAK';\nconst AUTO_START_TIMER = 'AUTO_START_TIMER';\nconst UPDATE_SESSION_LENGTH = 'UPDATE_SESSION_LENGTH';\nconst UPDATE_BREAK_LENGTH = 'UPDATE_BREAK_LENGTH';\nconst TOGGLE_ALARM_SOUND = 'TOGGLE_ALARM_SOUND';\nconst TOGGLE_AUTO_START = 'TOGGLE_AUTO_START';\n// quote constants\nconst UPDATE_QUOTE = 'UPDATE_QUOTE';\n// todo constatns\nconst SYNC_TODO_DB = 'SYNC_TODO_DB';\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SET_TODO_FILTER = 'SET_TODO_FILTER';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\nconst SET_NOTIFICATIONS = 'SET_NOTIFICATIONS';\nconst REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\n\n// action creators\n// timer actions\nexport const startTimer = () => ({\n  type: START_TIMER,\n});\n\nexport const runTimer = () => ({\n  type: RUN_TIMER,\n});\n\nexport const stopTimer = () => ({\n  type: STOP_TIMER,\n});\n\nexport const resetTimer = () => ({\n  type: RESET_TIMER,\n});\n\nexport const startBreak = () => ({\n  type: START_BREAK,\n});\n\nexport const autoStartTimer = () => ({\n  type: AUTO_START_TIMER,\n});\n\nexport const updateSessionLength = value => ({\n  type: UPDATE_SESSION_LENGTH,\n  value,\n});\n\nexport const updateBreakLength = value => ({\n  type: UPDATE_BREAK_LENGTH,\n  value,\n});\n\nexport const toggleAlarmSound = () => ({\n  type: TOGGLE_ALARM_SOUND,\n});\n\nexport const toggleAutoStart = () => ({\n  type: TOGGLE_AUTO_START,\n});\n\n// quote actions\nexport const updateQuote = quote => ({\n  type: UPDATE_QUOTE,\n  quote,\n});\n\n// todo actions\n// sync redux store with indexedDB\nexport const syncTodosDB = (id, todos) => ({\n  type: SYNC_TODO_DB,\n  id,\n  todos,\n});\n\nexport const updateInput = text => ({\n  type: UPDATE_INPUT,\n  text,\n});\n\nexport const addTodo = todo => ({\n  type: ADD_TODO,\n  todo,\n});\n\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  id,\n});\nexport const deleteTodo = id => ({\n  type: DELETE_TODO,\n  id,\n});\nexport const setFilter = filter => ({\n  type: SET_TODO_FILTER,\n  filter,\n});\n\nexport const setNotifications = text => ({\n  type: SET_NOTIFICATIONS,\n  text,\n});\nexport const removeNotification = id => ({\n  type: REMOVE_NOTIFICATION,\n  id,\n});\n","import { connect } from 'react-redux';\nimport Quotes from '../components/Quote/Quotes';\nimport { updateQuote } from '../actions';\n\nconst mapStateToProps = state => ({\n  quoteText: state.quote.quoteText,\n  quoteAuthor: state.quote.quoteAuthor,\n  isBreakTime: state.timer.isBreakTime,\n  secondsElapsed: state.timer.secondsElapsed,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateQuote: quote => dispatch(updateQuote(quote)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quotes);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormattedTime(props) {\n  const { time } = props;\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time % 60);\n  const clockTime = `${minutes < 10 ? `0${minutes}` : minutes} : ${seconds < 10 ? `0${seconds}` : seconds}`;\n  // set document title with clock time\n  document.title = clockTime;\n  return <p>{clockTime}</p>;\n}\nFormattedTime.propTypes = {\n  time: PropTypes.number.isRequired,\n};\nexport default FormattedTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormattedTime from './FormattedTime';\n\nfunction Clock(props) {\n  const { clockTime, secondsElapsed } = props;\n  const time = clockTime - secondsElapsed;\n  return (\n    <div className=\"clock-ring-one\">\n      <div className=\"clock-ring-two\">\n        <div className=\"clock-ring-three\">\n          <div className=\"clock-time\">\n            <FormattedTime time={time} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nClock.propTypes = {\n  clockTime: PropTypes.number.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n};\nexport default Clock;\n","import React from 'react';\nimport './button.css';\n\nfunction Button(props) {\n  return <input type=\"button\" {...props} />;\n}\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nfunction ClockControls(props) {\n  const { isTimerRunning, onStart, onStop, onReset } = props;\n  return (\n    <div className=\"button-controls\">\n      {isTimerRunning ? (\n        <Button name=\"stop\" value=\"Pause\" className=\"btn\" onClick={onStop} />\n      ) : (\n        <Button name=\"start\" value=\"Start\" className=\"btn\" onClick={onStart} />\n      )}\n      <Button name=\"reset\" value=\"Reset\" className=\"btn\" onClick={onReset} />\n    </div>\n  );\n}\n\nClockControls.propTypes = {\n  isTimerRunning: PropTypes.bool.isRequired,\n  onStart: PropTypes.func.isRequired,\n  onStop: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\nexport default ClockControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './settings.css';\n\n// session length value between 0 to 60 in minutes - handle stepup,stepdown,input change\nfunction hadleSessionLength(value, dispatchSessionUpdate) {\n  if ((value > 0 && value <= 60) || value === '') {\n    dispatchSessionUpdate(value);\n    // update clock time\n  }\n}\n// break length value between 0 to 15 in minutes - handle stepup,stepdown,input change\nfunction hadleBreakLength(value, dispatchBreakUpdate) {\n  if ((value > 0 && value <= 15) || value === '') {\n    dispatchBreakUpdate(value);\n  }\n}\n\nfunction PomodoroTimerSettings(props) {\n  const { sessionLength, breakLength, isAlarmON, isAutoStartON } = props;\n  const { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } = props;\n  return (\n    <div className=\"settings\">\n      <h2>Timer Settings</h2>\n      <div className=\"input-control\">\n        <label htmlFor=\"session\">\n          Session Length\n          <div className=\"input-group\">\n            <input\n              type=\"button\"\n              name=\"step-down-session\"\n              value=\"-\"\n              onClick={() => hadleSessionLength(sessionLength - 1, updateSessionLength)}\n            />\n\n            <input\n              type=\"number\"\n              id=\"session\"\n              min=\"1\"\n              max=\"60\"\n              value={sessionLength}\n              name=\"session-length\"\n              onChange={event => hadleSessionLength(event.target.value, updateSessionLength)}\n            />\n\n            <input\n              type=\"button\"\n              name=\"step-up-session\"\n              value=\"+\"\n              onClick={() => hadleSessionLength(sessionLength + 1, updateSessionLength)}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"input-control\">\n        <label htmlFor=\"break\">\n          Break Length\n          <div className=\"input-group\">\n            <input\n              type=\"button\"\n              name=\"step-down-break\"\n              value=\"-\"\n              onClick={() => hadleBreakLength(breakLength - 1, updateBreakLength)}\n            />\n            <input\n              type=\"number\"\n              id=\"break\"\n              min=\"1\"\n              max=\"20\"\n              value={breakLength}\n              name=\"break-length\"\n              onChange={event => hadleBreakLength(event.target.value, updateBreakLength)}\n            />\n            <input\n              type=\"button\"\n              name=\"step-up-break\"\n              value=\"+\"\n              onClick={() => hadleBreakLength(breakLength + 1, updateBreakLength)}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"input-control alaram-sound\">\n        <label htmlFor=\"sounds\">\n          <input type=\"checkbox\" id=\"sounds\" name=\"alaramsounds\" checked={isAlarmON} onChange={toggleAlarmSound} />\n          <span className=\"custom-checkbox\" />\n          Sound\n        </label>\n      </div>\n      <div className=\"input-control auto-start\">\n        <label htmlFor=\"auto-start\">\n          <input type=\"checkbox\" id=\"auto-start\" name=\"autostart\" checked={isAutoStartON} onChange={toggleAutoStart} />\n          <span className=\"custom-checkbox\" />\n          Repeat Timer\n        </label>\n      </div>\n    </div>\n  );\n}\nPomodoroTimerSettings.propTypes = {\n  sessionLength: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  breakLength: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  updateSessionLength: PropTypes.func.isRequired,\n  updateBreakLength: PropTypes.func.isRequired,\n  toggleAlarmSound: PropTypes.func.isRequired,\n  toggleAutoStart: PropTypes.func.isRequired,\n  isAlarmON: PropTypes.bool.isRequired,\n  isAutoStartON: PropTypes.bool.isRequired,\n};\nexport default PomodoroTimerSettings;\n","import { connect } from 'react-redux';\nimport { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } from '../actions';\nimport TimerSettings from '../components/Timer/Settings';\n\nconst mapStateToProps = state => ({\n  sessionLength: state.timer.sessionLength,\n  breakLength: state.timer.breakLength,\n  isAlarmON: state.timer.isAlarmON,\n  isAutoStartON: state.timer.isAutoStartON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateSessionLength: value => {\n    dispatch(updateSessionLength(value));\n  },\n  updateBreakLength: value => {\n    dispatch(updateBreakLength(value));\n  },\n  toggleAlarmSound: () => dispatch(toggleAlarmSound()),\n  toggleAutoStart: () => dispatch(toggleAutoStart()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimerSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Clock from './Clock';\nimport ClockControls from './ClockControls';\nimport TimerSettings from '../../containers/TimerSettings';\nimport './pomodoroApp.css';\nimport alarmSound from '../../assets/alarm.mp3';\n\nclass PomodoroTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.alarmRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentProps = this.props;\n    const {\n      secondsElapsed,\n      clockTime,\n      isBreakTime,\n      isAutoStartON,\n      resetTimer,\n      autoStartTimer,\n      isAlarmON,\n    } = currentProps;\n    // start timer\n    // TODO - use Date object based timer than setInterval\n    if (currentProps.isTimerRunning && !prevProps.isTimerRunning) {\n      this.timerID = setInterval(() => {\n        currentProps.runTimer();\n      }, 1000);\n    }\n\n    // stop timer\n    if (!currentProps.isTimerRunning && prevProps.isTimerRunning) {\n      clearInterval(this.timerID);\n    }\n\n    // start break time, play alarm sound\n    if (secondsElapsed === clockTime && !isBreakTime) {\n      if (isAlarmON) {\n        this.alarmRef.current.play();\n      }\n      currentProps.startBreak();\n    }\n\n    // after break time reset or restart timer, play alarm sound\n    if (secondsElapsed === clockTime && isBreakTime) {\n      if (isAlarmON) {\n        this.alarmRef.current.play();\n      }\n      resetTimer();\n      if (isAutoStartON) {\n        autoStartTimer();\n      } else {\n        clearInterval(this.timerID);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { clockTime, secondsElapsed, isTimerRunning, isTimerPaused, isBreakTime } = this.props;\n    const { startTimer, stopTimer, resetTimer } = this.props;\n    return (\n      <div className=\"pomodoro-container\">\n        <div className=\"clock\">\n          <Clock\n            clockTime={clockTime}\n            secondsElapsed={secondsElapsed}\n            isTimerRunning={isTimerRunning}\n            isTimerPaused={isTimerPaused}\n            isBreakTime={isBreakTime}\n          />\n          <ClockControls isTimerRunning={isTimerRunning} onStart={startTimer} onStop={stopTimer} onReset={resetTimer} />\n        </div>\n\n        <TimerSettings />\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio src={alarmSound} ref={this.alarmRef} />\n      </div>\n    );\n  }\n}\nPomodoroTimer.propTypes = {\n  clockTime: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  secondsElapsed: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  startTimer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.func.isRequired,\n};\nexport default PomodoroTimer;\n","import { connect } from 'react-redux';\nimport { startTimer, stopTimer, resetTimer, runTimer, startBreak, autoStartTimer } from '../actions';\nimport PomodoroTimer from '../components/Timer/PomodoroApp';\n\nconst mapStateToProps = state => ({\n  clockTime: state.timer.clockTime,\n  secondsElapsed: state.timer.secondsElapsed,\n  isTimerRunning: state.timer.isTimerRunning,\n  isTimerPaused: state.timer.isTimerPaused,\n  isBreakTime: state.timer.isBreakTime,\n  isAutoStartON: state.timer.isAutoStartON,\n  isAlarmON: state.timer.isAlarmON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startTimer: () => dispatch(startTimer()),\n  stopTimer: () => dispatch(stopTimer()),\n  resetTimer: () => dispatch(resetTimer()),\n  runTimer: () => dispatch(runTimer()),\n  startBreak: () => dispatch(startBreak()),\n  autoStartTimer: () => dispatch(autoStartTimer()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PomodoroTimer);\n","import idb from 'idb';\n\nfunction indexedDBConnection() {\n  if (!('indexedDB' in window)) {\n    return false;\n  }\n  const dbPromise = idb.open('todoDB', 1, upgradeDb => {\n    if (!upgradeDb.objectStoreNames.contains('todoStore')) {\n      const todoObjectStore = upgradeDb.createObjectStore('todoStore', { keyPath: 'id' });\n      todoObjectStore.createIndex('id', 'id', { unique: true });\n    }\n  });\n  return dbPromise;\n}\n\nexport default indexedDBConnection;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../components/indexedDB';\nimport { updateInput, addTodo, setNotifications } from '../actions';\n\nconst dbPromise = dBConnection();\nfunction AddTodo(props) {\n  const { id, text, inputChange, submitForm, addNotification } = props;\n  return (\n    <div className=\"add-todo\">\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!text.trim()) {\n            return;\n          }\n          // add todo to Redux store\n          submitForm(text);\n          // add todo to indexedDB\n          dbPromise\n            .then(db => {\n              const tx = db.transaction('todoStore', 'readwrite');\n              const store = tx.objectStore('todoStore');\n              store.add({ id, text, completed: false });\n              return tx.complete;\n            })\n            .then(() => {\n              // add notification message\n              addNotification('Added to your list');\n            });\n        }}\n        className=\"todo-form\"\n      >\n        <input\n          type=\"text\"\n          value={text}\n          name=\"todo\"\n          id=\"add-todo\"\n          placeholder=\"New task ...\"\n          className=\"todo-input\"\n          aria-label=\"add new task\"\n          onChange={event => inputChange(event.target.value)}\n        />\n        <input type=\"submit\" name=\"add-todo\" value=\"Add\" className=\"btn-add-todo\" />\n      </form>\n    </div>\n  );\n}\n\nAddTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  inputChange: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n};\nconst mapStateToProps = state => ({\n  id: state.todo.nextTodoId,\n  text: state.todo.text,\n});\nconst mapDispatchToProps = dispatch => ({\n  inputChange: text => dispatch(updateInput(text)),\n  submitForm: todo => dispatch(addTodo(todo)),\n  addNotification: (text, status) => dispatch(setNotifications(text, status)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddTodo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoFilterLinks(props) {\n  const { filter, setFilter } = props;\n  const style = { background: 'var(--ABSOLUTE-ZERO)', color: '#ffffff' };\n  return (\n    <p className=\"todo-filter\">\n      <input\n        type=\"button\"\n        value=\"All\"\n        onClick={() => setFilter('SHOW_ALL')}\n        style={filter === 'SHOW_ALL' ? style : null}\n      />\n      <input\n        type=\"button\"\n        value=\"Active\"\n        onClick={() => setFilter('SHOW_ACTIVE')}\n        style={filter === 'SHOW_ACTIVE' ? style : null}\n      />\n      <input\n        type=\"button\"\n        value=\"Completed\"\n        onClick={() => setFilter('SHOW_COMPLETED')}\n        style={filter === 'SHOW_COMPLETED' ? style : null}\n      />\n    </p>\n  );\n}\nTodoFilterLinks.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\nexport default TodoFilterLinks;\n","import { connect } from 'react-redux';\nimport TodoFilter from '../components/Todo/TodoFilterLinks';\nimport { setFilter } from '../actions';\n\nconst mapstateToProps = state => ({\n  filter: state.todo.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setFilter(filter)),\n});\nexport default connect(\n  mapstateToProps,\n  mapDispatchToProps\n)(TodoFilter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../indexedDB';\n\n// IndexedDB connection\nconst dbPromise = dBConnection();\n// mark todo item as Done/Undone on onChange event\nfunction toggleTodoTask(id, text, completed, toggleTask, setNotifications) {\n  // toggle todo in Redux store\n  toggleTask(id);\n  // toggle todo in IndexedDB\n  dbPromise\n    .then(db => {\n      const tx = db.transaction('todoStore', 'readwrite');\n      const store = tx.objectStore('todoStore');\n      store.put({ id, text, completed: !completed });\n      return tx.complete;\n    })\n    // set notifcation message\n    .then(() => {\n      setNotifications(completed ? 'Task Marked as Active' : 'Task Marked as Complete');\n    });\n}\n// delete todo task\nfunction deleteTodoTask(id, deleteTodo, setNotifications) {\n  // delete task in redux store\n  deleteTodo(id);\n  // delete task in indexedDB\n  dbPromise\n    .then(db => {\n      const tx = db.transaction('todoStore', 'readwrite');\n      const store = tx.objectStore('todoStore');\n      store.delete(id);\n      return tx.complete;\n    })\n    // set notifcation message\n    .then(() => {\n      setNotifications('Task deleted successfully');\n    });\n}\n\nfunction Task(props) {\n  const { id, completed, text, toggleTodo, deleteTodo, setNotifications } = props;\n  return (\n    <li className={`${completed ? `completed-task` : null}`}>\n      <label htmlFor={id}>\n        <input\n          type=\"checkbox\"\n          id={id}\n          checked={completed}\n          onChange={() => toggleTodoTask(id, text, completed, toggleTodo, setNotifications)}\n        />\n        <span className=\"custom-checkbox\" />\n        {text}\n      </label>\n      <button type=\"button\" className=\"remove-btn\" onClick={() => deleteTodoTask(id, deleteTodo, setNotifications)}>\n        X\n      </button>\n    </li>\n  );\n}\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  setNotifications: PropTypes.func.isRequired,\n};\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\n\nfunction TodoItems(props) {\n  const { tasks, toggleTodo, deleteTodo, setNotifications } = props;\n  return (\n    // render all todo items\n    <div className=\"todo-items\">\n      {tasks.length ? (\n        <ul>\n          {tasks.map(task => (\n            <Task\n              key={task.id}\n              id={task.id}\n              completed={task.completed}\n              text={task.text}\n              toggleTodo={toggleTodo}\n              deleteTodo={deleteTodo}\n              setNotifications={setNotifications}\n            />\n          ))}\n        </ul>\n      ) : (\n        <p className=\"no-tasks\">Your Task list is empty</p>\n      )}\n    </div>\n  );\n}\nTodoItems.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  setNotifications: PropTypes.func.isRequired,\n};\nexport default TodoItems;\n","import { connect } from 'react-redux';\nimport TodoItems from '../components/Todo/TodoItems';\nimport { toggleTodo, deleteTodo, setNotifications } from '../actions';\n\nfunction getVisibleTodos(todos, filter) {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_ACTIVE':\n      return todos.filter(task => !task.completed);\n    case 'SHOW_COMPLETED':\n      return todos.filter(task => task.completed);\n    default:\n      return todos;\n  }\n}\nconst mapStateToProps = state => ({\n  tasks: getVisibleTodos(state.todo.tasks, state.todo.filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id)),\n  deleteTodo: id => dispatch(deleteTodo(id)),\n  setNotifications: id => dispatch(setNotifications(id)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoItems);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './notification.css';\n\nlet timeOutId;\nfunction Notifications(props) {\n  const { removeNotification, notifications } = props;\n  if (!notifications.length) {\n    clearTimeout(timeOutId);\n  }\n  return (\n    <div className=\"notifications\">\n      {notifications.map(message => {\n        // remove notification after 4 seconds\n        timeOutId = setTimeout(() => {\n          removeNotification(message.id);\n        }, 4000);\n        // render notification message\n        return (\n          <p key={message.id} className=\"show-msg\">\n            {message.text}\n          </p>\n        );\n      })}\n    </div>\n  );\n}\nNotifications.propTypes = {\n  removeNotification: PropTypes.func.isRequired,\n  notifications: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default Notifications;\n","import { connect } from 'react-redux';\nimport { removeNotification } from '../actions';\nimport Notification from '../components/Todo/Notification';\n\nconst mapStateToProps = state => ({\n  removeNotification: state.todo.removeNotification,\n  notifications: state.todo.notifications,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  removeNotification: id => dispatch(removeNotification(id)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../indexedDB';\nimport AddTodo from '../../containers/AddTodo';\nimport TodoFilter from '../../containers/TodoFilter';\nimport VisibleTodoList from '../../containers/VisibleTodoList';\nimport ShowNotifications from '../../containers/ShowNotifications';\nimport './todo.css';\n\nclass Todo extends React.Component {\n  componentDidMount() {\n    const { syncStoreWithIDB, setNotifications } = this.props;\n    // get all todo tasks from IndexedDB and store in redux store\n    this.dbPromise = dBConnection();\n    // retrieve todos from indexedDB\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readonly');\n        const store = tx.objectStore('todoStore');\n        return store.getAll();\n      })\n      // dispatch an action to update redux store with indexedDB data\n      .then(data => {\n        const id = data.length ? data[data.length - 1].id + 1 : 0;\n        syncStoreWithIDB(id, data);\n        return data.length;\n      })\n      // display Notification message\n      .then(tasksCount => {\n        const msg = tasksCount ? 'Tasks loaded from IndexedDB' : 'No Tasks availabe in DB';\n        setNotifications(msg);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <ShowNotifications />\n        <h1 className=\"todo-title\">To-Do</h1>\n        <AddTodo />\n        <TodoFilter />\n        <VisibleTodoList />\n      </div>\n    );\n  }\n}\nTodo.propTypes = {\n  syncStoreWithIDB: PropTypes.func.isRequired,\n  setNotifications: PropTypes.func.isRequired,\n};\nexport default Todo;\n","import { connect } from 'react-redux';\nimport Todo from '../components/Todo/Todo';\nimport { syncTodosDB, setNotifications } from '../actions';\n\n// get all todo tasks from IndexedDB and store in redux store\nconst mapStateToProps = state => ({\n  notifications: state.todo.notifications,\n});\nconst mapDispatchToProps = dispatch => ({\n  syncStoreWithIDB: (id, todos) => dispatch(syncTodosDB(id, todos)),\n  setNotifications: (text, status) => dispatch(setNotifications(text, status)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Todo);\n","import React from 'react';\nimport Header from './Header/Header';\nimport Quotes from '../containers/GetQuote';\nimport PomodoroTimer from '../containers/PomodoroTimer';\nimport TodoApp from '../containers/TodoApp';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"container\">\n        <Header />\n        <div className=\"content\">\n          <Quotes />\n          <PomodoroTimer />\n        </div>\n      </div>\n\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/* eslint-enable */\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}