{"version":3,"sources":["assets/alaram.mp3","reducers/timerReducer.js","reducers/quoteReducer.js","reducers/todoReducer.js","reducers/index.js","components/Header/Header.js","components/Quote/Quotes.js","containers/GetQuote.js","actions/index.js","components/Timer/FormattedTime.js","components/Timer/Clock.js","components/Timer/Button.js","components/Timer/ClockControls.js","components/Timer/Settings.js","containers/TimerSettings.js","components/Timer/PomodoroApp.js","containers/PomodoroTimer.js","components/indexedDB.js","containers/AddTodo.js","components/Todo/TodoFilterLinks.js","containers/TodoFilter.js","components/Todo/Task.js","components/Todo/TodoItems.js","containers/VisibleTodoList.js","components/Todo/Todo.js","containers/TodoApp.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","sessionLength","breakLength","secondsElapsed","isTimerRunning","isTimerPaused","isBreakTime","isAlarmON","isAutoStartON","timerReducer","state","arguments","length","undefined","action","type","Object","objectSpread","value","quoteText","quoteAuthor","quoteReducer","quote","text","author","filter","tasks","nextTodoId","todoReducer","todos","id","concat","todo","completed","map","task","index","combineReducers","timer","Header","react_default","a","createElement","className","randomNum","Math","round","random","callbackMethodName","END_POINT","getJsonp","url","callback","script","document","src","body","appendChild","getElementById","remove","Quotes","props","updateQuote","window","data","style","color","connect","dispatch","FormattedTime","time","minutes","floor","seconds","Clock","Timer_FormattedTime","Button","assign","ClockControls","onStart","onStop","onReset","Timer_Button","name","onClick","PomodoroTimerSettings","updateSessionLength","updateBreakLength","toggleAlarmSound","toggleAutoStart","htmlFor","min","max","onChange","event","parseInt","target","checked","val","Number","isNaN","TimerSettings","PomodoroTimer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","alaramRef","React","createRef","prevProps","currentProps","timerID","setInterval","runTimer","clearInterval","startBreak","current","play","autoStartTimer","resetTimer","timerId","_this$props","_this$props2","startTimer","stopTimer","Timer_Clock","Timer_ClockControls","alaramSound","ref","Component","indexedDBConnection","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","dbPromise","dBConnection","inputChange","updateInput","submitForm","addTodo","onSubmit","e","preventDefault","trim","then","db","tx","transaction","objectStore","add","complete","placeholder","aria-label","TodoFilterLinks","setFilter","background","TodoFilter","Task","toggleTodo","textDecoration","textDecorationColor","toggle","put","toggleTodoTask","TodoItems","Todo_Task","key","getVisibleTodos","Todo","syncStoreWithIDB","getAll","containers_AddTodo","VisibleTodoList","syncTodosDB","App","components_Header_Header","GetQuote","containers_PomodoroTimer","TodoApp","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af68faef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alaram.4b9995ee.mp3\";","const initialState = {\n  sessionLength: 25,\n  breakLength: 5,\n  secondsElapsed: 0,\n  isTimerRunning: false,\n  isTimerPaused: false,\n  isBreakTime: false,\n  isAlarmON: true,\n  isAutoStartON: true,\n};\n\n/* reducer */\nfunction timerReducer(state = initialState, action) {\n  switch (action.type) {\n    /* Clock state */\n    case 'START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n        isTimerPaused: false,\n      };\n    case 'STOP_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: true,\n      };\n    case 'RESET_TIMER':\n      return {\n        ...state,\n        isTimerRunning: false,\n        isTimerPaused: false,\n        isBreakTime: false,\n        secondsElapsed: state.sessionLength * 60,\n      };\n    case 'RUN_TIMER':\n      return {\n        ...state,\n        secondsElapsed: state.secondsElapsed - 1,\n      };\n    case 'START_BREAK':\n      return {\n        ...state,\n        secondsElapsed: state.breakLength * 60,\n        isBreakTime: true,\n      };\n    case 'AUTO_START_TIMER':\n      return {\n        ...state,\n        isTimerRunning: true,\n        isBreakTime: false,\n        isTimerPaused: false,\n        secondsElapsed: state.sessionLength * 60,\n      };\n    /* Clock settings */\n    case 'UPDATE_SESSION_LENGTH':\n      return {\n        ...state,\n        sessionLength: action.value,\n      };\n\n    case 'UPDATE_BREAK_LENGTH':\n      return {\n        ...state,\n        breakLength: action.value,\n      };\n\n    case 'TOGGLE_ALARM_SOUND':\n      return { ...state, isAlarmON: !state.isAlarmON };\n\n    case 'TOGGLE_AUTO_START':\n      return {\n        ...state,\n        isAutoStartON: !state.isAutoStartON,\n      };\n\n    default:\n      return { ...state, secondsElapsed: state.sessionLength * 60 };\n  }\n}\n\nexport default timerReducer;\n","const initialState = {\n  quoteText: 'To hell with circumstances; I create opportunities',\n  quoteAuthor: 'Bruce Lee',\n};\n\nfunction quoteReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'UPDATE_QUOTE':\n      return { ...state, quoteText: action.quote.text, quoteAuthor: action.quote.author };\n    default:\n      return { ...state };\n  }\n}\n\nexport default quoteReducer;\n","const initialState = {\n  text: '',\n  filter: 'SHOW_ALL',\n  tasks: [],\n  nextTodoId: 0,\n};\nfunction todoReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SYNC_TODO_DB':\n      return { ...state, tasks: action.todos, nextTodoId: action.id };\n    case 'ADD_TODO':\n      return {\n        ...state,\n        text: '',\n        tasks: state.tasks.concat({ id: state.nextTodoId, text: action.todo, completed: false }),\n        nextTodoId: state.nextTodoId + 1,\n      };\n    case 'UPDATE_INPUT':\n      return { ...state, text: action.text };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        tasks: state.tasks.map(\n          (task, index) =>\n            index === action.id ? { ...task, completed: !state.tasks[action.id].completed } : { ...task }\n        ),\n      };\n    case 'SET_TODO_FILTER':\n      return { ...state, filter: action.filter };\n    default:\n      return { ...state };\n  }\n}\n\nexport default todoReducer;\n","import { combineReducers } from 'redux';\n\nimport timerReducer from './timerReducer';\nimport quoteReducer from './quoteReducer';\nimport todoReducer from './todoReducer';\n\nexport default combineReducers({\n  timer: timerReducer,\n  quote: quoteReducer,\n  todo: todoReducer,\n});\n","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Pomodoro Timer</h1>\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Quotes.css';\n\n// JSONP to get quote from API\nconst randomNum = Math.round(10000 * Math.random());\nconst callbackMethodName = `cb_${randomNum}`;\nconst END_POINT = 'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=';\n\n// JSONP function to get data from API\nfunction getJsonp(url, callback) {\n  const script = document.createElement('script');\n  script.id = `script_${callbackMethodName}`;\n  script.src = url + callback;\n  document.body.appendChild(script);\n  document.getElementById(script.id).remove();\n}\n\ngetJsonp(END_POINT, callbackMethodName);\n\nfunction Quotes(props) {\n  const { isBreakTime, quoteText, quoteAuthor, secondsElapsed, updateQuote } = props;\n  // JSONP callback function\n  window[callbackMethodName] = data => {\n    updateQuote({ text: data.quoteText, author: data.quoteAuthor });\n  };\n  // get new quote after break\n  if (secondsElapsed === 0 && isBreakTime) {\n    getJsonp(END_POINT, callbackMethodName);\n  }\n  return (\n    <div className=\"quote\" style={isBreakTime ? { color: '#3066be' } : {}}>\n      {isBreakTime ? (\n        <h2>It&apos;s ok to take a break</h2>\n      ) : (\n        <div>\n          <p>{quoteText}</p>\n          <span className=\"quote-author\">{quoteAuthor}</span>\n        </div>\n      )}\n    </div>\n  );\n}\nQuotes.propTypes = {\n  isBreakTime: PropTypes.bool.isRequired,\n  quoteText: PropTypes.string.isRequired,\n  quoteAuthor: PropTypes.string.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  updateQuote: PropTypes.func.isRequired,\n};\nexport default Quotes;\n","import { connect } from 'react-redux';\nimport Quotes from '../components/Quote/Quotes';\nimport { updateQuote } from '../actions';\n\nconst mapStateToProps = state => ({\n  quoteText: state.quote.quoteText,\n  quoteAuthor: state.quote.quoteAuthor,\n  isBreakTime: state.timer.isBreakTime,\n  secondsElapsed: state.timer.secondsElapsed,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateQuote: quote => dispatch(updateQuote(quote)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quotes);\n","// action constants\n// timer constants\nconst START_TIMER = 'START_TIMER';\nconst RUN_TIMER = 'RUN_TIMER';\nconst STOP_TIMER = 'STOP_TIMER';\nconst RESET_TIMER = 'RESET_TIMER';\nconst START_BREAK = 'START_BREAK';\nconst AUTO_START_TIMER = 'AUTO_START_TIMER';\nconst UPDATE_SESSION_LENGTH = 'UPDATE_SESSION_LENGTH';\nconst UPDATE_BREAK_LENGTH = 'UPDATE_BREAK_LENGTH';\nconst TOGGLE_ALARM_SOUND = 'TOGGLE_ALARM_SOUND';\nconst TOGGLE_AUTO_START = 'TOGGLE_AUTO_START';\n// quote constants\nconst UPDATE_QUOTE = 'UPDATE_QUOTE';\n// todo constatns\nconst SYNC_TODO_DB = 'SYNC_TODO_DB';\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst SET_TODO_FILTER = 'SET_TODO_FILTER';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\n\n// action creators\n// timer actions\nexport const startTimer = () => ({\n  type: START_TIMER,\n});\n\nexport const runTimer = () => ({\n  type: RUN_TIMER,\n});\n\nexport const stopTimer = () => ({\n  type: STOP_TIMER,\n});\n\nexport const resetTimer = () => ({\n  type: RESET_TIMER,\n});\n\nexport const startBreak = () => ({\n  type: START_BREAK,\n});\n\nexport const autoStartTimer = () => ({\n  type: AUTO_START_TIMER,\n});\n\nexport const updateSessionLength = value => ({\n  type: UPDATE_SESSION_LENGTH,\n  value,\n});\n\nexport const updateBreakLength = value => ({\n  type: UPDATE_BREAK_LENGTH,\n  value,\n});\n\nexport const toggleAlarmSound = () => ({\n  type: TOGGLE_ALARM_SOUND,\n});\n\nexport const toggleAutoStart = () => ({\n  type: TOGGLE_AUTO_START,\n});\n\n// quote actions\nexport const updateQuote = quote => ({\n  type: UPDATE_QUOTE,\n  quote,\n});\n\n// todo actions\n// sync redux store with indexedDB\nexport const syncTodosDB = (id, todos) => ({\n  type: SYNC_TODO_DB,\n  id,\n  todos,\n});\n\nexport const addTodo = todo => ({\n  type: ADD_TODO,\n  todo,\n});\nexport const updateInput = text => ({\n  type: UPDATE_INPUT,\n  text,\n});\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  id,\n});\n\nexport const setFilter = filter => ({\n  type: SET_TODO_FILTER,\n  filter,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormattedTime(props) {\n  const { time } = props;\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time % 60);\n  return <p>{`${minutes < 10 ? `0${minutes}` : minutes} : ${seconds < 10 ? `0${seconds}` : seconds}`}</p>;\n}\nFormattedTime.propTypes = {\n  time: PropTypes.number.isRequired,\n};\nexport default FormattedTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormattedTime from './FormattedTime';\n\nfunction Clock(props) {\n  const { sessionLength, secondsElapsed, isTimerRunning, isTimerPaused, isBreakTime } = props;\n  let time;\n\n  if (!isTimerRunning && !isTimerPaused) {\n    time = sessionLength * 60; // * 60 to conver it into seconds\n  } else if ((isTimerRunning && !isTimerPaused) || (!isTimerRunning && isTimerPaused)) {\n    time = secondsElapsed;\n  }\n\n  return (\n    <div className={`clock${' '}${isBreakTime ? 'break' : 'session'}`}>\n      <FormattedTime time={time} />\n    </div>\n  );\n}\nClock.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n};\nexport default Clock;\n","import React from 'react';\nimport './button.css';\n\nfunction Button(props) {\n  return <input type=\"button\" {...props} />;\n}\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nfunction ClockControls(props) {\n  const { isTimerRunning, onStart, onStop, onReset } = props;\n  return (\n    <div className=\"btn-controls\">\n      {isTimerRunning ? (\n        <Button name=\"stop\" value=\"Pause\" className=\"btn btn-stop\" onClick={onStop} />\n      ) : (\n        <Button name=\"start\" value=\"Start\" className=\"btn btn-start\" onClick={onStart} />\n      )}\n      <Button name=\"reset\" value=\"Reset\" className=\"btn btn-reset\" onClick={onReset} />\n    </div>\n  );\n}\n\nClockControls.propTypes = {\n  isTimerRunning: PropTypes.bool.isRequired,\n  onStart: PropTypes.func.isRequired,\n  onStop: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\nexport default ClockControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './settings.css';\n\nfunction PomodoroTimerSettings(props) {\n  const { sessionLength, breakLength, isAlarmON, isAutoStartON } = props;\n  const { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } = props;\n  return (\n    <div className=\"settings\">\n      <h2>settings</h2>\n      <div className=\"timer-settings\">\n        <label htmlFor=\"session\">\n          <input\n            type=\"number\"\n            id=\"session\"\n            min=\"1\"\n            max=\"60\"\n            value={sessionLength}\n            name=\"sessionLength\"\n            onChange={event => updateSessionLength(parseInt(event.target.value, 10))}\n          />\n          Session Length\n        </label>\n        <br />\n        <label htmlFor=\"break\">\n          <input\n            type=\"number\"\n            id=\"break\"\n            min=\"1\"\n            max=\"20\"\n            value={breakLength}\n            name=\"breakLength\"\n            onChange={event => updateBreakLength(parseInt(event.target.value, 10))}\n          />\n          Break Length\n        </label>\n      </div>\n      <div className=\"other-settings\">\n        <label htmlFor=\"sounds\" className=\"sound-setting\">\n          <input type=\"checkbox\" id=\"sounds\" name=\"timer-sounds\" checked={isAlarmON} onChange={toggleAlarmSound} />\n          <span />\n          Alarm Sound\n        </label>\n        <br />\n        <label htmlFor=\"auto-start\" className=\"auto-start\">\n          <input\n            type=\"checkbox\"\n            id=\"auto-start\"\n            name=\"timer-sounds\"\n            checked={isAutoStartON}\n            onChange={toggleAutoStart}\n          />\n          <span />\n          Auto start session\n        </label>\n      </div>\n    </div>\n  );\n}\nPomodoroTimerSettings.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  breakLength: PropTypes.number.isRequired,\n  updateSessionLength: PropTypes.func.isRequired,\n  updateBreakLength: PropTypes.func.isRequired,\n  toggleAlarmSound: PropTypes.func.isRequired,\n  toggleAutoStart: PropTypes.func.isRequired,\n  isAlarmON: PropTypes.bool.isRequired,\n  isAutoStartON: PropTypes.bool.isRequired,\n};\nexport default PomodoroTimerSettings;\n","import { connect } from 'react-redux';\nimport { updateSessionLength, updateBreakLength, toggleAlarmSound, toggleAutoStart } from '../actions';\nimport TimerSettings from '../components/Timer/Settings';\n\nconst mapStateToProps = state => ({\n  sessionLength: state.timer.sessionLength,\n  breakLength: state.timer.breakLength,\n  isAlarmON: state.timer.isAlarmON,\n  isAutoStartON: state.timer.isAutoStartON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateSessionLength: value => {\n    const val = Number.isNaN(value) ? 0 : value;\n    dispatch(updateSessionLength(val));\n  },\n  updateBreakLength: value => {\n    const val = Number.isNaN(value) ? 0 : value;\n    dispatch(updateBreakLength(val));\n  },\n  toggleAlarmSound: () => dispatch(toggleAlarmSound()),\n  toggleAutoStart: () => dispatch(toggleAutoStart()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimerSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Clock from './Clock';\nimport ClockControls from './ClockControls';\nimport TimerSettings from '../../containers/TimerSettings';\nimport './pomodoroApp.css';\nimport alaramSound from '../../assets/alaram.mp3';\n\nclass PomodoroTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.alaramRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentProps = this.props;\n    // start timer\n    if (currentProps.isTimerRunning && !prevProps.isTimerRunning) {\n      this.timerID = setInterval(() => {\n        currentProps.runTimer();\n      }, 1000);\n    }\n    // pause/stop timer\n    if (!currentProps.isTimerRunning && prevProps.isTimerRunning) {\n      clearInterval(this.timerID);\n    }\n    // start break time\n    if (currentProps.secondsElapsed === 0 && !currentProps.isBreakTime) {\n      currentProps.startBreak();\n    }\n    // after break time reset or restart timer and play alaram sound\n    if (currentProps.secondsElapsed === 0 && currentProps.isBreakTime) {\n      this.alaramRef.current.play();\n      if (currentProps.isAutoStartON) {\n        currentProps.autoStartTimer();\n      } else {\n        clearInterval(this.timerID);\n        currentProps.resetTimer();\n      }\n    }\n    // sync elapsedSeconds with sessionLength on sessionLength update\n    if (!currentProps.isTimerRunning && !currentProps.isTimerPaused) {\n      currentProps.resetTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { sessionLength, secondsElapsed, isTimerRunning, isTimerPaused, isBreakTime } = this.props;\n    const { startTimer, stopTimer, resetTimer } = this.props;\n    return (\n      <div className=\"timer-container\">\n        <div className=\"timer\">\n          <Clock\n            sessionLength={sessionLength}\n            secondsElapsed={secondsElapsed}\n            isTimerRunning={isTimerRunning}\n            isTimerPaused={isTimerPaused}\n            isBreakTime={isBreakTime}\n          />\n          <ClockControls isTimerRunning={isTimerRunning} onStart={startTimer} onStop={stopTimer} onReset={resetTimer} />\n        </div>\n\n        <TimerSettings />\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio src={alaramSound} ref={this.alaramRef} />\n      </div>\n    );\n  }\n}\nPomodoroTimer.propTypes = {\n  sessionLength: PropTypes.number.isRequired,\n  secondsElapsed: PropTypes.number.isRequired,\n  isBreakTime: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  startTimer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.func.isRequired,\n};\nexport default PomodoroTimer;\n","import { connect } from 'react-redux';\nimport { startTimer, stopTimer, resetTimer, runTimer, startBreak, autoStartTimer } from '../actions';\nimport PomodoroTimer from '../components/Timer/PomodoroApp';\n\nconst mapStateToProps = state => ({\n  sessionLength: state.timer.sessionLength,\n  secondsElapsed: state.timer.secondsElapsed,\n  isTimerRunning: state.timer.isTimerRunning,\n  isTimerPaused: state.timer.isTimerPaused,\n  isBreakTime: state.timer.isBreakTime,\n  isAutoStartON: state.timer.isAutoStartON,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startTimer: () => dispatch(startTimer()),\n  stopTimer: () => dispatch(stopTimer()),\n  resetTimer: () => dispatch(resetTimer()),\n  runTimer: () => dispatch(runTimer()),\n  startBreak: () => dispatch(startBreak()),\n  autoStartTimer: () => dispatch(autoStartTimer()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PomodoroTimer);\n","import idb from 'idb';\n\nfunction indexedDBConnection() {\n  if (!('indexedDB' in window)) {\n    return false;\n  }\n  const dbPromise = idb.open('todoDB', 1, upgradeDb => {\n    if (!upgradeDb.objectStoreNames.contains('todoStore')) {\n      const todoObjectStore = upgradeDb.createObjectStore('todoStore', { keyPath: 'id' });\n      todoObjectStore.createIndex('id', 'id', { unique: true });\n    }\n  });\n  return dbPromise;\n}\n\nexport default indexedDBConnection;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../components/indexedDB';\nimport { updateInput, addTodo } from '../actions';\n\nconst dbPromise = dBConnection();\nfunction AddTodo(props) {\n  const { id, text, inputChange, submitForm } = props;\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (!text.trim()) {\n          return;\n        }\n        submitForm(text);\n        // add todo to indexedDB\n        dbPromise.then(db => {\n          const tx = db.transaction('todoStore', 'readwrite');\n          const store = tx.objectStore('todoStore');\n          store.add({ id, text, completed: false });\n          return tx.complete;\n        });\n      }}\n      className=\"todo-form\"\n    >\n      <input\n        type=\"text\"\n        value={text}\n        name=\"todo\"\n        id=\"add-todo\"\n        placeholder=\"New task ...\"\n        className=\"todo-input\"\n        aria-label=\"add new task\"\n        onChange={event => inputChange(event.target.value)}\n      />\n      <input type=\"submit\" name=\"add-todo\" value=\"Add\" className=\"btn-add-todo\" />\n    </form>\n  );\n}\n\nAddTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  inputChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\nfunction mapStateToProps(state) {\n  return { id: state.todo.nextTodoId, text: state.todo.text };\n}\nconst mapDispatchToProps = dispatch => ({\n  inputChange: text => dispatch(updateInput(text)),\n  submitForm: todo => dispatch(addTodo(todo)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddTodo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoFilterLinks(props) {\n  const { filter, setFilter } = props;\n  const style = { background: '#005555', color: '#ffffff' };\n  return (\n    <p className=\"todo-filter\">\n      <input\n        type=\"button\"\n        value=\"All\"\n        onClick={() => setFilter('SHOW_ALL')}\n        style={filter === 'SHOW_ALL' ? style : null}\n      />\n      <input\n        type=\"button\"\n        value=\"Active\"\n        onClick={() => setFilter('SHOW_ACTIVE')}\n        style={filter === 'SHOW_ACTIVE' ? style : null}\n      />\n      <input\n        type=\"button\"\n        value=\"Completed\"\n        onClick={() => setFilter('SHOW_COMPLETED')}\n        style={filter === 'SHOW_COMPLETED' ? style : null}\n      />\n    </p>\n  );\n}\nTodoFilterLinks.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\nexport default TodoFilterLinks;\n","import { connect } from 'react-redux';\nimport TodoFilter from '../components/Todo/TodoFilterLinks';\nimport { setFilter } from '../actions';\n\nconst mapstateToProps = state => ({\n  filter: state.todo.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setFilter(filter)),\n});\nexport default connect(\n  mapstateToProps,\n  mapDispatchToProps\n)(TodoFilter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../indexedDB';\n\nconst dbPromise = dBConnection();\nfunction toggleTodoTask(id, text, completed, toggle) {\n  toggle(id);\n  dbPromise.then(db => {\n    const tx = db.transaction('todoStore', 'readwrite');\n    const store = tx.objectStore('todoStore');\n    store.put({ id, text, completed: !completed });\n    return tx.complete;\n  });\n}\n\nfunction Task(props) {\n  const { id, text, completed, toggleTodo } = props;\n\n  const style = { textDecoration: 'line-through', textDecorationColor: '#005555' };\n  return (\n    <li style={completed ? style : null}>\n      <label htmlFor={id}>\n        <input\n          type=\"checkbox\"\n          id={id}\n          checked={completed}\n          onChange={() => toggleTodoTask(id, text, completed, toggleTodo)}\n        />\n        <span />\n      </label>\n      {text}\n    </li>\n  );\n}\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n};\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\n\nfunction TodoItems(props) {\n  const { tasks, toggleTodo } = props;\n  return (\n    <ul className=\"todo-items\">\n      {tasks.length ? (\n        tasks.map(task => (\n          <Task key={task.id} id={task.id} completed={task.completed} text={task.text} toggleTodo={toggleTodo} />\n        ))\n      ) : (\n        <li className=\"no-tasks\">No tasks found</li>\n      )}\n    </ul>\n  );\n}\nTodoItems.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n};\nexport default TodoItems;\n","import { connect } from 'react-redux';\nimport TodoItems from '../components/Todo/TodoItems';\nimport { toggleTodo } from '../actions';\n\nfunction getVisibleTodos(todos, filter) {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_ACTIVE':\n      return todos.filter(task => !task.completed);\n    case 'SHOW_COMPLETED':\n      return todos.filter(task => task.completed);\n    default:\n      return todos;\n  }\n}\nconst mapStateToProps = state => ({\n  tasks: getVisibleTodos(state.todo.tasks, state.todo.filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoItems);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dBConnection from '../indexedDB';\nimport AddTodo from '../../containers/AddTodo';\nimport TodoFilter from '../../containers/TodoFilter';\nimport VisibleTodoList from '../../containers/VisibleTodoList';\n\nimport './todo.css';\n\nclass Todo extends React.Component {\n  componentDidMount() {\n    const { syncStoreWithIDB } = this.props;\n    // get all todo tasks from IndexedDB and store in redux store\n    this.dbPromise = dBConnection();\n    // retrieve from indexedDB\n    this.dbPromise\n      .then(db => {\n        const tx = db.transaction('todoStore', 'readonly');\n        const store = tx.objectStore('todoStore');\n        return store.getAll();\n      })\n      // dispatch an action to update redux store\n      // update\n      .then(data => {\n        const id = data.length ? data.length : 0;\n        syncStoreWithIDB(id, data);\n      });\n    // });\n  }\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"todo-title\">To-Do</h1>\n        <AddTodo />\n        <TodoFilter />\n        <VisibleTodoList />\n      </div>\n    );\n  }\n}\nTodo.propTypes = {\n  syncStoreWithIDB: PropTypes.func.isRequired,\n};\nexport default Todo;\n","import { connect } from 'react-redux';\nimport Todo from '../components/Todo/Todo';\nimport { syncTodosDB } from '../actions';\n\n// get all todo tasks from IndexedDB and store in redux store\nconst mapDispatchToProps = dispatch => ({\n  syncStoreWithIDB: (id, todos) => dispatch(syncTodosDB(id, todos)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Todo);\n","import React from 'react';\nimport Header from './Header/Header';\nimport Quotes from '../containers/GetQuote';\nimport PomodoroTimer from '../containers/PomodoroTimer';\nimport TodoApp from '../containers/TodoApp';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Quotes />\n      <PomodoroTimer />\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/* eslint-enable */\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}